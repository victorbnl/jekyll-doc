var search_data = {"index":{"searchIndex":["jekyll","cache","cleaner","collection","collectionreader","command","commands","build","clean","doctor","help","new","newtheme","serve","bodyprocessor","httpawareconnection","livereloadreactor","servlet","skipanalyzer","configuration","converter","converters","identity","markdown","kramdownparser","smartypants","convertible","datareader","deprecator","document","drops","collectiondrop","documentdrop","drop","excerptdrop","jekylldrop","sitedrop","staticfiledrop","unifiedpayloaddrop","urldrop","entryfilter","errors","excerpt","external","filters","datefilters","groupingfilters","urlfilters","frontmatterdefaults","hooks","inclusion","layout","layoutreader","liquidextensions","liquidrenderer","file","table","logadapter","page","pageexcerpt","pagereader","pagewithoutafile","pathmanager","plugin","pluginmanager","postreader","profiler","publisher","reader","regenerator","relatedposts","renderer","site","staticfile","staticfilereader","stevenson","tags","highlightblock","includerelativetag","includetag","link","optimizedincludetag","postcomparer","posturl","theme","themeassetsreader","themebuilder","erbrenderer","url","utils","ansi","exec","internet","platforms","threadevent","wintz","kramdown","jekylldocument","parser","smartypants","object","safeyaml","<=>()","<=>()","<=>()","<=>()","==()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","abort_with()","absolute_url()","add()","add()","add_build_options()","add_default_collections()","add_default_excludes()","add_dependency()","add_include_to_dependency()","add_permalink_suffix()","adjust_verbosity()","all()","arg_is_present?()","array_to_sentence_string()","asset_file?()","asset_file?()","assets_path()","backup?()","bad_browser?()","base_directory()","basename()","basename()","basename()","basename_without_ext()","bash_on_windows?()","blank_template()","blessed_gems()","build()","build()","build_index()","cache()","calculate()","catch_inheritance()","categories()","categories()","categories_from_path()","cgi_escape()","chunked?()","cleaned_relative_path()","cleaned_relative_path()","cleanup()","cleanup!()","clear()","clear()","clear()","clear_cache()","clear_if_config_changed()","close()","coffeescript_file?()","coffeescript_file?()","collapse_document()","collection()","collection()","collection_dir()","collection_names()","collections()","collections()","collections_path()","config()","config=()","config_files()","configuration()","configuration_from_options()","conflicting_urls()","connected?()","conscientious_require()","content()","content_methods()","convert()","convert()","convert()","convert()","convert()","converters()","converters()","create!()","create_blank_site()","csv_to_array()","data()","data()","data()","data_delegator()","data_delegators()","date()","date()","date_to_long_string()","date_to_rfc822()","date_to_string()","date_to_xmlschema()","day()","debug()","deep_merge_hashes()","deep_merge_hashes!()","defaults()","defaults_deprecate_type()","delegate_method()","delegate_method_as()","delegate_methods()","delete()","deprecated_equality()","deprecated_relative_permalinks()","deprecation_checks()","deprecation_message()","derive_base_directory()","descendants()","destination()","destination()","destination()","destination_rel_dir()","dir()","directory()","disable_disk_cache!()","disabled?()","disk_cache_enabled?()","dispatch()","dns()","do_get()","do_layout()","docs()","docs_to_write()","documents()","documents()","draft?()","duplicable?()","each()","each_key()","each_site_file()","ensure_not_in_dest()","ensure_time!()","entries()","entry_filter()","env()","environment()","error()","error()","escape_path()","excerpt()","excerpt()","excerpt()","excerpt_separator()","excerpt_separator()","excluded?()","exists?()","extname_list()","extract_excerpt()","extract_metadata()","fetch()","file()","file_read_opts()","files()","filter()","filter_entries()","filtered_entries()","find()","find()","find_converter_instance()","find_exp()","force()","format_error()","formatted_topic()","from()","frontmatter_defaults()","fsnotify_buggy?()","gemfile_exists?()","generate()","generate_excerpt?()","generate_excerpt?()","generate_url()","generate_url_from_drop()","generate_url_from_hash()","generated_permalink()","generated_url()","get_config_value_with_override()","get_entries()","get_processor()","getset()","getter_method_names()","glob_include?()","global()","group_by()","group_by_exp()","handle_websockets_event()","has?()","has_liquid_construct?()","has_yaml_header?()","hash_for_json()","hash_for_json()","healthy?()","hidden_in_the_future?()","highlighter_prefix()","highlighter_prefix()","highlighter_suffix()","highlighter_suffix()","hook_owner()","hour()","html?()","html?()","html_pages()","i_day()","i_month()","id()","id()","in_cache_dir()","in_dest_dir()","in_source_dir()","in_theme_dir()","include?()","included?()","includes_path()","increment_bytes()","increment_count()","increment_time()","incremental?()","index?()","info()","inherited()","inherited()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","initialized_post_name()","inline?()","insert_hook()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instantiate_subclasses()","invalid_command()","invalid_layout?()","invalid_layout?()","invoke_drop()","jekyll()","jekyll_version_with_minor()","join()","jruby?()","jsonify()","key?()","key?()","key?()","keys()","layout()","layout_directory()","layouts()","layouts_path()","linux?()","livereload_args()","load_cached_partial()","locate_include_file()","log_level=()","logger()","logger=()","long_day()","long_month()","lookup_variable()","lsi_related_posts()","markdownify()","matches()","matches()","matches()","measure_time()","mergable?()","merge()","merge!()","merge_data!()","merged_file_read_opts()","message()","metadata_file()","method_missing()","method_missing()","minute()","modified?()","modified?()","modified_time()","month()","most_recent_posts()","mri?()","mtime()","mtimes()","mutable()","mutable?()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","next_doc()","no_layout?()","no_subcommand()","normalize_whitespace()","number_of_words()","osx?()","output()","output_ext()","output_ext()","output_ext()","output_ext()","output_ext()","output_ext()","outside_site_source?()","page_path()","parse()","parse_content()","parse_date()","parse_params()","path()","path()","path()","payload()","permalink()","permalink()","place_in_layout?()","place_in_layout?()","place_in_layout?()","place_in_layouts()","placeholders()","plugin_allowed?()","plugins_path()","pluralized_array_from_hash()","pop()","populate_categories()","populate_tags()","possible_keys()","post_attr_hash()","post_date()","posts()","posts()","previous()","previous_doc()","print_stats()","priority()","priority_value()","private_delegate_methods()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process!()","process_site()","process_with_graceful_fail()","processed?()","profile_process()","proper_site_url?()","properly_gathered_posts?()","publish?()","published?()","published?()","publisher()","push()","quiet()","quiet?()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read_config_file()","read_config_files()","read_content()","read_data_file()","read_data_to()","read_directories()","read_drafts()","read_file()","read_posts()","read_publishable()","read_yaml()","read_yaml()","really_windows?()","realpath_prefixed_with?()","regenerate?()","register()","register_one()","related_posts()","related_posts()","relative_directory()","relative_path()","relative_path()","relative_path()","relative_permalinks_are_deprecated()","relative_to_source()","relative_url()","reload()","remove()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render!()","render_all_layouts()","render_document()","render_liquid()","render_liquid()","render_variable()","render_with_liquid?()","render_with_liquid?()","render_with_liquid?()","render_with_liquid?()","renderer()","renderer()","require_all()","require_from_bundler()","require_gems()","require_if_present()","require_plugin_files()","require_theme_deps()","require_with_graceful_fail()","reset()","reset()","reset()","reset()","reset_cache()","respond_to_missing?()","respond_to_missing?()","retrieve_dirs()","retrieve_pages()","retrieve_posts()","retrieve_static_files()","root()","run()","run()","running?()","runtime_dependencies()","safe()","safe_glob()","safe_load_file()","sample()","sanitize_filename()","sanitize_label()","sanitize_url()","sanitized_path()","sanitized_path()","sass_file?()","sass_file?()","sass_path()","sassify()","scaffold_post_content()","scssify()","search_file()","search_index_file()","second()","set()","set_timezone()","setup()","setup()","setup()","setup()","shift()","short_day()","short_month()","short_year()","shutdown()","site()","site_data()","site_payload()","sites()","skip_processing?()","skip_processing?()","slug()","slugified_categories()","slugify()","slugify()","smartify()","sort()","sort_files!()","source()","source_file_mtime()","source_modified_or_dest_missing?()","special?()","start()","stats_table()","stop()","stringify_hash_keys()","stringify_keys()","strip()","strip_index()","subclasses()","superdirs_regex()","symbolize_hash_keys()","symlink?()","symlink_outside_site_source?()","syntax_example()","tabulate()","tag_includes_dirs()","tag_includes_dirs()","tag_name()","tags()","template()","template()","theme_directories()","theme_layout_directory()","third_party_processors()","title()","titleize_slug()","to_h()","to_h()","to_hash()","to_html()","to_integer()","to_json()","to_json()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","transform()","transform_keys()","trigger()","trigger_hooks()","trigger_hooks()","trigger_hooks()","type()","type()","unescape_path()","unix?()","unshift()","update_deprecated_types()","uri_escape()","url()","url()","url()","url_placeholders()","url_placeholders()","url_template()","url_template()","urls_only_differ_by_case()","user_email()","user_name()","valid_include_file?()","valid_processors()","validate()","validate_data!()","validate_file_name()","validate_params()","validate_permalink!()","value_from_plural_key()","value_from_singular_key()","vanilla_windows?()","verbose()","verbose?()","version()","version_constraint()","w_day()","w_year()","wait()","warn()","warn()","warnings()","watch()","week()","where()","where_exp()","whitelist()","windows?()","write()","write()","write()","write()","write()","write?()","write?()","write?()","write?()","write_message?()","write_metadata()","xml_escape()","y_day()","yaml_file?()","year()","default.html","main.scss","main.scss","index","livereload.js","mime.types","404.html","about.markdown","index.markdown","gemfile","default.html","page.html","post.html","_post","index.html","style.scss"],"longSearchIndex":["jekyll","jekyll::cache","jekyll::cleaner","jekyll::collection","jekyll::collectionreader","jekyll::command","jekyll::commands","jekyll::commands::build","jekyll::commands::clean","jekyll::commands::doctor","jekyll::commands::help","jekyll::commands::new","jekyll::commands::newtheme","jekyll::commands::serve","jekyll::commands::serve::bodyprocessor","jekyll::commands::serve::httpawareconnection","jekyll::commands::serve::livereloadreactor","jekyll::commands::serve::servlet","jekyll::commands::serve::skipanalyzer","jekyll::configuration","jekyll::converter","jekyll::converters","jekyll::converters::identity","jekyll::converters::markdown","jekyll::converters::markdown::kramdownparser","jekyll::converters::smartypants","jekyll::convertible","jekyll::datareader","jekyll::deprecator","jekyll::document","jekyll::drops","jekyll::drops::collectiondrop","jekyll::drops::documentdrop","jekyll::drops::drop","jekyll::drops::excerptdrop","jekyll::drops::jekylldrop","jekyll::drops::sitedrop","jekyll::drops::staticfiledrop","jekyll::drops::unifiedpayloaddrop","jekyll::drops::urldrop","jekyll::entryfilter","jekyll::errors","jekyll::excerpt","jekyll::external","jekyll::filters","jekyll::filters::datefilters","jekyll::filters::groupingfilters","jekyll::filters::urlfilters","jekyll::frontmatterdefaults","jekyll::hooks","jekyll::inclusion","jekyll::layout","jekyll::layoutreader","jekyll::liquidextensions","jekyll::liquidrenderer","jekyll::liquidrenderer::file","jekyll::liquidrenderer::table","jekyll::logadapter","jekyll::page","jekyll::pageexcerpt","jekyll::pagereader","jekyll::pagewithoutafile","jekyll::pathmanager","jekyll::plugin","jekyll::pluginmanager","jekyll::postreader","jekyll::profiler","jekyll::publisher","jekyll::reader","jekyll::regenerator","jekyll::relatedposts","jekyll::renderer","jekyll::site","jekyll::staticfile","jekyll::staticfilereader","jekyll::stevenson","jekyll::tags","jekyll::tags::highlightblock","jekyll::tags::includerelativetag","jekyll::tags::includetag","jekyll::tags::link","jekyll::tags::optimizedincludetag","jekyll::tags::postcomparer","jekyll::tags::posturl","jekyll::theme","jekyll::themeassetsreader","jekyll::themebuilder","jekyll::themebuilder::erbrenderer","jekyll::url","jekyll::utils","jekyll::utils::ansi","jekyll::utils::exec","jekyll::utils::internet","jekyll::utils::platforms","jekyll::utils::threadevent","jekyll::utils::wintz","kramdown","kramdown::jekylldocument","kramdown::parser","kramdown::parser::smartypants","object","safeyaml","jekyll::document#<=>()","jekyll::drops::documentdrop#<=>()","jekyll::plugin::<=>()","jekyll::plugin#<=>()","jekyll::tags::postcomparer#==()","jekyll::cache#[]()","jekyll::convertible#[]()","jekyll::document#[]()","jekyll::drops::drop#[]()","jekyll::drops::sitedrop#[]()","jekyll::cache#[]=()","jekyll::drops::drop#[]=()","jekyll::logadapter#abort_with()","jekyll::filters::urlfilters#absolute_url()","jekyll::regenerator#add()","jekyll::stevenson#add()","jekyll::command::add_build_options()","jekyll::configuration#add_default_collections()","jekyll::configuration#add_default_excludes()","jekyll::regenerator#add_dependency()","jekyll::tags::includetag#add_include_to_dependency()","jekyll::utils#add_permalink_suffix()","jekyll::logadapter#adjust_verbosity()","jekyll::frontmatterdefaults#all()","jekyll::deprecator#arg_is_present?()","jekyll::filters#array_to_sentence_string()","jekyll::convertible#asset_file?()","jekyll::document#asset_file?()","jekyll::theme#assets_path()","jekyll::entryfilter#backup?()","jekyll::commands::serve::skipanalyzer#bad_browser?()","jekyll::entryfilter#base_directory()","jekyll::document#basename()","jekyll::staticfile#basename()","jekyll::theme#basename()","jekyll::document#basename_without_ext()","jekyll::utils::platforms#bash_on_windows?()","jekyll::commands::new::blank_template()","jekyll::external::blessed_gems()","jekyll::commands::build::build()","jekyll::relatedposts#build()","jekyll::relatedposts#build_index()","jekyll::liquidrenderer#cache()","jekyll::utils::wintz#calculate()","jekyll::plugin::catch_inheritance()","jekyll::drops::urldrop#categories()","jekyll::site#categories()","jekyll::document#categories_from_path()","jekyll::filters#cgi_escape()","jekyll::commands::serve::skipanalyzer#chunked?()","jekyll::document#cleaned_relative_path()","jekyll::staticfile#cleaned_relative_path()","jekyll::site#cleanup()","jekyll::cleaner#cleanup!()","jekyll::cache::clear()","jekyll::cache#clear()","jekyll::regenerator#clear()","jekyll::regenerator#clear_cache()","jekyll::cache::clear_if_config_changed()","jekyll::stevenson#close()","jekyll::convertible#coffeescript_file?()","jekyll::document#coffeescript_file?()","jekyll::drops::documentdrop#collapse_document()","jekyll::drops::documentdrop#collection()","jekyll::drops::urldrop#collection()","jekyll::collection#collection_dir()","jekyll::site#collection_names()","jekyll::drops::sitedrop#collections()","jekyll::site#collections()","jekyll::site#collections_path()","jekyll::drops::sitedrop#config()","jekyll::site#config=()","jekyll::configuration#config_files()","jekyll::configuration()","jekyll::command::configuration_from_options()","jekyll::commands::doctor::conflicting_urls()","jekyll::utils::internet#connected?()","jekyll::pluginmanager#conscientious_require()","jekyll::inclusion#content()","jekyll::drops::drop#content_methods()","jekyll::converters::identity#convert()","jekyll::converters::markdown#convert()","jekyll::converters::markdown::kramdownparser#convert()","jekyll::converters::smartypants#convert()","jekyll::renderer#convert()","jekyll::convertible#converters()","jekyll::renderer#converters()","jekyll::themebuilder#create!()","jekyll::commands::new::create_blank_site()","jekyll::configuration#csv_to_array()","jekyll::document#data()","jekyll::excerpt#data()","jekyll::staticfile#data()","jekyll::drops::drop::data_delegator()","jekyll::drops::drop::data_delegators()","jekyll::document#date()","jekyll::drops::excerptdrop#date()","jekyll::filters::datefilters#date_to_long_string()","jekyll::filters::datefilters#date_to_rfc822()","jekyll::filters::datefilters#date_to_string()","jekyll::filters::datefilters#date_to_xmlschema()","jekyll::drops::urldrop#day()","jekyll::logadapter#debug()","jekyll::utils#deep_merge_hashes()","jekyll::utils#deep_merge_hashes!()","jekyll::staticfile#defaults()","jekyll::deprecator#defaults_deprecate_type()","jekyll::drops::drop::delegate_method()","jekyll::drops::drop::delegate_method_as()","jekyll::drops::drop::delegate_methods()","jekyll::cache#delete()","jekyll::tags::postcomparer#deprecated_equality()","jekyll::commands::doctor::deprecated_relative_permalinks()","jekyll::pluginmanager#deprecation_checks()","jekyll::deprecator#deprecation_message()","jekyll::entryfilter#derive_base_directory()","jekyll::plugin::descendants()","jekyll::document#destination()","jekyll::page#destination()","jekyll::staticfile#destination()","jekyll::staticfile#destination_rel_dir()","jekyll::page#dir()","jekyll::collection#directory()","jekyll::cache::disable_disk_cache!()","jekyll::regenerator#disabled?()","jekyll::cache#disk_cache_enabled?()","jekyll::commands::serve::httpawareconnection#dispatch()","jekyll::utils::internet#dns()","jekyll::commands::serve::servlet#do_get()","jekyll::convertible#do_layout()","jekyll::collection#docs()","jekyll::site#docs_to_write()","jekyll::drops::sitedrop#documents()","jekyll::site#documents()","jekyll::document#draft?()","jekyll::utils#duplicable?()","jekyll::drops::drop#each()","jekyll::drops::drop#each_key()","jekyll::site#each_site_file()","jekyll::site#ensure_not_in_dest()","jekyll::frontmatterdefaults#ensure_time!()","jekyll::collection#entries()","jekyll::collection#entry_filter()","jekyll::env()","jekyll::drops::jekylldrop#environment()","jekyll::logadapter#error()","jekyll::stevenson#error()","jekyll::url::escape_path()","jekyll::drops::documentdrop#excerpt()","jekyll::drops::excerptdrop#excerpt()","jekyll::page#excerpt()","jekyll::document#excerpt_separator()","jekyll::page#excerpt_separator()","jekyll::entryfilter#excluded?()","jekyll::collection#exists?()","jekyll::converters::markdown#extname_list()","jekyll::excerpt#extract_excerpt()","jekyll::collection#extract_metadata()","jekyll::drops::drop#fetch()","jekyll::liquidrenderer#file()","jekyll::tags::includetag#file_read_opts()","jekyll::collection#files()","jekyll::entryfilter#filter()","jekyll::reader#filter_entries()","jekyll::collection#filtered_entries()","jekyll::filters#find()","jekyll::frontmatterdefaults#find()","jekyll::site#find_converter_instance()","jekyll::filters#find_exp()","jekyll::regenerator#force()","jekyll::liquidrenderer::format_error()","jekyll::logadapter#formatted_topic()","jekyll::configuration::from()","jekyll::site#frontmatter_defaults()","jekyll::commands::doctor::fsnotify_buggy?()","jekyll::pluginmanager::gemfile_exists?()","jekyll::site#generate()","jekyll::document#generate_excerpt?()","jekyll::page#generate_excerpt?()","jekyll::url#generate_url()","jekyll::url#generate_url_from_drop()","jekyll::url#generate_url_from_hash()","jekyll::url#generated_permalink()","jekyll::url#generated_url()","jekyll::configuration#get_config_value_with_override()","jekyll::reader#get_entries()","jekyll::converters::markdown#get_processor()","jekyll::cache#getset()","jekyll::drops::drop::getter_method_names()","jekyll#glob_include?()","jekyll::drops::jekylldrop::global()","jekyll::filters::groupingfilters#group_by()","jekyll::filters::groupingfilters#group_by_exp()","jekyll::commands::serve::livereloadreactor#handle_websockets_event()","jekyll::utils::ansi#has?()","jekyll::utils#has_liquid_construct?()","jekyll::utils#has_yaml_header?()","jekyll::drops::documentdrop#hash_for_json()","jekyll::drops::drop#hash_for_json()","jekyll::commands::doctor::healthy?()","jekyll::publisher#hidden_in_the_future?()","jekyll::converter::highlighter_prefix()","jekyll::converter#highlighter_prefix()","jekyll::converter::highlighter_suffix()","jekyll::converter#highlighter_suffix()","jekyll::convertible#hook_owner()","jekyll::drops::urldrop#hour()","jekyll::commands::serve::skipanalyzer#html?()","jekyll::page#html?()","jekyll::drops::sitedrop#html_pages()","jekyll::drops::urldrop#i_day()","jekyll::drops::urldrop#i_month()","jekyll::document#id()","jekyll::excerpt#id()","jekyll::site#in_cache_dir()","jekyll::site#in_dest_dir()","jekyll::site#in_source_dir()","jekyll::site#in_theme_dir()","jekyll::excerpt#include?()","jekyll::entryfilter#included?()","jekyll::theme#includes_path()","jekyll::liquidrenderer#increment_bytes()","jekyll::liquidrenderer#increment_count()","jekyll::liquidrenderer#increment_time()","jekyll::site#incremental?()","jekyll::page#index?()","jekyll::logadapter#info()","jekyll::command::inherited()","jekyll::plugin::inherited()","jekyll::commands::build::init_with_program()","jekyll::commands::clean::init_with_program()","jekyll::commands::doctor::init_with_program()","jekyll::commands::help::init_with_program()","jekyll::commands::new::init_with_program()","jekyll::commands::newtheme::init_with_program()","jekyll::commands::serve::init_with_program()","jekyll::commands::new::initialized_post_name()","jekyll::commands::serve::skipanalyzer#inline?()","jekyll::hooks::insert_hook()","jekyll::collection#inspect()","jekyll::document#inspect()","jekyll::drops::drop#inspect()","jekyll::excerpt#inspect()","jekyll::filters#inspect()","jekyll::inclusion#inspect()","jekyll::layout#inspect()","jekyll::page#inspect()","jekyll::pageexcerpt#inspect()","jekyll::site#inspect()","jekyll::staticfile#inspect()","jekyll::site#instantiate_subclasses()","jekyll::commands::help::invalid_command()","jekyll::convertible#invalid_layout?()","jekyll::renderer#invalid_layout?()","jekyll::drops::drop#invoke_drop()","jekyll::drops::unifiedpayloaddrop#jekyll()","jekyll::themebuilder::erbrenderer#jekyll_version_with_minor()","jekyll::pathmanager::join()","jekyll::utils::platforms#jruby?()","jekyll::filters#jsonify()","jekyll::cache#key?()","jekyll::drops::drop#key?()","jekyll::drops::sitedrop#key?()","jekyll::drops::drop#keys()","jekyll::drops::excerptdrop#layout()","jekyll::layoutreader#layout_directory()","jekyll::renderer#layouts()","jekyll::theme#layouts_path()","jekyll::utils::platforms#linux?()","jekyll::commands::serve::bodyprocessor#livereload_args()","jekyll::tags::includetag#load_cached_partial()","jekyll::tags::includetag#locate_include_file()","jekyll::logadapter#log_level=()","jekyll::logger()","jekyll::logger=()","jekyll::drops::urldrop#long_day()","jekyll::drops::urldrop#long_month()","jekyll::liquidextensions#lookup_variable()","jekyll::relatedposts#lsi_related_posts()","jekyll::filters#markdownify()","jekyll::converters::identity#matches()","jekyll::converters::markdown#matches()","jekyll::converters::smartypants#matches()","jekyll::liquidrenderer#measure_time()","jekyll::utils#mergable?()","jekyll::drops::drop#merge()","jekyll::drops::drop#merge!()","jekyll::document#merge_data!()","jekyll::utils#merged_file_read_opts()","jekyll::logadapter#message()","jekyll::regenerator#metadata_file()","jekyll::collection#method_missing()","jekyll::document#method_missing()","jekyll::drops::urldrop#minute()","jekyll::regenerator#modified?()","jekyll::staticfile#modified?()","jekyll::staticfile#modified_time()","jekyll::drops::urldrop#month()","jekyll::relatedposts#most_recent_posts()","jekyll::utils::platforms#mri?()","jekyll::staticfile#mtime()","jekyll::staticfile::mtimes()","jekyll::drops::drop::mutable()","jekyll::drops::drop::mutable?()","jekyll::drops::urldrop#name()","jekyll::cache::new()","jekyll::cleaner::new()","jekyll::collection::new()","jekyll::collectionreader::new()","jekyll::commands::serve::bodyprocessor::new()","jekyll::commands::serve::httpawareconnection::new()","jekyll::commands::serve::livereloadreactor::new()","jekyll::commands::serve::servlet::new()","jekyll::commands::serve::skipanalyzer::new()","jekyll::converter::new()","jekyll::converters::markdown::kramdownparser::new()","jekyll::converters::smartypants::new()","jekyll::datareader::new()","jekyll::document::new()","jekyll::drops::drop::new()","jekyll::entryfilter::new()","jekyll::excerpt::new()","jekyll::frontmatterdefaults::new()","jekyll::inclusion::new()","jekyll::layout::new()","jekyll::layoutreader::new()","jekyll::liquidrenderer::new()","jekyll::liquidrenderer::file::new()","jekyll::liquidrenderer::table::new()","jekyll::logadapter::new()","jekyll::page::new()","jekyll::pagereader::new()","jekyll::plugin::new()","jekyll::pluginmanager::new()","jekyll::postreader::new()","jekyll::profiler::new()","jekyll::publisher::new()","jekyll::reader::new()","jekyll::regenerator::new()","jekyll::relatedposts::new()","jekyll::renderer::new()","jekyll::site::new()","jekyll::staticfile::new()","jekyll::staticfilereader::new()","jekyll::stevenson::new()","jekyll::tags::highlightblock::new()","jekyll::tags::includetag::new()","jekyll::tags::link::new()","jekyll::tags::postcomparer::new()","jekyll::tags::posturl::new()","jekyll::theme::new()","jekyll::themeassetsreader::new()","jekyll::themebuilder::new()","jekyll::themebuilder::erbrenderer::new()","jekyll::url::new()","jekyll::utils::threadevent::new()","kramdown::jekylldocument::new()","kramdown::parser::smartypants::new()","jekyll::drops::documentdrop#next()","jekyll::document#next_doc()","jekyll::document#no_layout?()","jekyll::deprecator#no_subcommand()","jekyll::filters#normalize_whitespace()","jekyll::filters#number_of_words()","jekyll::utils::platforms#osx?()","jekyll::excerpt#output()","jekyll::converters::identity#output_ext()","jekyll::converters::markdown#output_ext()","jekyll::converters::smartypants#output_ext()","jekyll::convertible#output_ext()","jekyll::document#output_ext()","jekyll::renderer#output_ext()","jekyll::tags::includetag#outside_site_source?()","jekyll::tags::includerelativetag#page_path()","jekyll::liquidrenderer::file#parse()","kramdown::parser::smartypants#parse_content()","jekyll::utils#parse_date()","jekyll::tags::includetag#parse_params()","jekyll::excerpt#path()","jekyll::page#path()","jekyll::staticfile#path()","jekyll::renderer#payload()","jekyll::document#permalink()","jekyll::page#permalink()","jekyll::convertible#place_in_layout?()","jekyll::document#place_in_layout?()","jekyll::excerpt#place_in_layout?()","jekyll::renderer#place_in_layouts()","jekyll::staticfile#placeholders()","jekyll::pluginmanager#plugin_allowed?()","jekyll::pluginmanager#plugins_path()","jekyll::utils#pluralized_array_from_hash()","jekyll::filters#pop()","jekyll::document#populate_categories()","jekyll::document#populate_tags()","jekyll::url#possible_keys()","jekyll::site#post_attr_hash()","jekyll::tags::postcomparer#post_date()","jekyll::drops::sitedrop#posts()","jekyll::site#posts()","jekyll::drops::documentdrop#previous()","jekyll::document#previous_doc()","jekyll::site#print_stats()","jekyll::plugin::priority()","jekyll::hooks::priority_value()","jekyll::drops::drop::private_delegate_methods()","jekyll::commands::build::process()","jekyll::commands::clean::process()","jekyll::commands::doctor::process()","jekyll::commands::new::process()","jekyll::commands::newtheme::process()","jekyll::commands::serve::process()","jekyll::deprecator#process()","jekyll::layout#process()","jekyll::page#process()","jekyll::site#process()","jekyll::commands::serve::bodyprocessor#process!()","jekyll::command::process_site()","jekyll::command::process_with_graceful_fail()","jekyll::commands::serve::bodyprocessor#processed?()","jekyll::profiler#profile_process()","jekyll::commands::doctor::proper_site_url?()","jekyll::commands::doctor::properly_gathered_posts?()","jekyll::publisher#publish?()","jekyll::convertible#published?()","jekyll::document#published?()","jekyll::site#publisher()","jekyll::filters#push()","jekyll::configuration#quiet()","jekyll::configuration#quiet?()","jekyll::collection#read()","jekyll::collectionreader#read()","jekyll::datareader#read()","jekyll::document#read()","jekyll::layoutreader#read()","jekyll::pagereader#read()","jekyll::reader#read()","jekyll::site#read()","jekyll::staticfilereader#read()","jekyll::themeassetsreader#read()","jekyll::configuration#read_config_file()","jekyll::configuration#read_config_files()","jekyll::postreader#read_content()","jekyll::datareader#read_data_file()","jekyll::datareader#read_data_to()","jekyll::reader#read_directories()","jekyll::postreader#read_drafts()","jekyll::tags::includetag#read_file()","jekyll::postreader#read_posts()","jekyll::postreader#read_publishable()","jekyll::convertible#read_yaml()","jekyll::pagewithoutafile#read_yaml()","jekyll::utils::platforms#really_windows?()","jekyll::tags::includetag#realpath_prefixed_with?()","jekyll::regenerator#regenerate?()","jekyll::hooks::register()","jekyll::hooks::register_one()","jekyll::document#related_posts()","jekyll::drops::sitedrop#related_posts()","jekyll::collection#relative_directory()","jekyll::document#relative_path()","jekyll::excerpt#relative_path()","jekyll::page#relative_path()","jekyll::site#relative_permalinks_are_deprecated()","jekyll::entryfilter#relative_to_source()","jekyll::filters::urlfilters#relative_url()","jekyll::commands::serve::livereloadreactor#reload()","jekyll::commands::clean::remove()","jekyll::inclusion#render()","jekyll::liquidrenderer::file#render()","jekyll::page#render()","jekyll::site#render()","jekyll::tags::highlightblock#render()","jekyll::tags::includetag#render()","jekyll::tags::link#render()","jekyll::tags::optimizedincludetag#render()","jekyll::tags::posturl#render()","jekyll::themebuilder::erbrenderer#render()","jekyll::liquidrenderer::file#render!()","jekyll::convertible#render_all_layouts()","jekyll::renderer#render_document()","jekyll::convertible#render_liquid()","jekyll::renderer#render_liquid()","jekyll::tags::includetag#render_variable()","jekyll::convertible#render_with_liquid?()","jekyll::document#render_with_liquid?()","jekyll::excerpt#render_with_liquid?()","jekyll::pageexcerpt#render_with_liquid?()","jekyll::convertible#renderer()","jekyll::document#renderer()","object#require_all()","jekyll::pluginmanager::require_from_bundler()","jekyll::pluginmanager#require_gems()","jekyll::external::require_if_present()","jekyll::pluginmanager#require_plugin_files()","jekyll::pluginmanager#require_theme_deps()","jekyll::external::require_with_graceful_fail()","jekyll::frontmatterdefaults#reset()","jekyll::liquidrenderer#reset()","jekyll::site#reset()","jekyll::utils::ansi#reset()","jekyll::staticfile::reset_cache()","jekyll::collection#respond_to_missing?()","jekyll::document#respond_to_missing?()","jekyll::reader#retrieve_dirs()","jekyll::reader#retrieve_pages()","jekyll::reader#retrieve_posts()","jekyll::reader#retrieve_static_files()","jekyll::theme#root()","jekyll::renderer#run()","jekyll::utils::exec#run()","jekyll::commands::serve::livereloadreactor#running?()","jekyll::theme#runtime_dependencies()","jekyll::plugin::safe()","jekyll::utils#safe_glob()","jekyll::configuration#safe_load_file()","jekyll::filters#sample()","jekyll::datareader#sanitize_filename()","jekyll::collection#sanitize_label()","jekyll::url#sanitize_url()","jekyll::sanitized_path()","jekyll::pathmanager::sanitized_path()","jekyll::convertible#sass_file?()","jekyll::document#sass_file?()","jekyll::theme#sass_path()","jekyll::filters#sassify()","jekyll::commands::new::scaffold_post_content()","jekyll::filters#scssify()","jekyll::commands::serve::servlet#search_file()","jekyll::commands::serve::servlet#search_index_file()","jekyll::drops::urldrop#second()","jekyll::utils::threadevent#set()","jekyll::set_timezone()","jekyll::converters::markdown#setup()","jekyll::converters::markdown::kramdownparser#setup()","jekyll::site#setup()","kramdown::jekylldocument::setup()","jekyll::filters#shift()","jekyll::drops::urldrop#short_day()","jekyll::drops::urldrop#short_month()","jekyll::drops::urldrop#short_year()","jekyll::commands::serve::shutdown()","jekyll::drops::unifiedpayloaddrop#site()","jekyll::site#site_data()","jekyll::site#site_payload()","jekyll::sites()","jekyll::commands::serve::skipanalyzer::skip_processing?()","jekyll::commands::serve::skipanalyzer#skip_processing?()","jekyll::drops::urldrop#slug()","jekyll::drops::urldrop#slugified_categories()","jekyll::filters#slugify()","jekyll::utils#slugify()","jekyll::filters#smartify()","jekyll::filters#sort()","jekyll::reader#sort_files!()","jekyll::configuration#source()","jekyll::document#source_file_mtime()","jekyll::regenerator#source_modified_or_dest_missing?()","jekyll::entryfilter#special?()","jekyll::commands::serve::livereloadreactor#start()","jekyll::liquidrenderer#stats_table()","jekyll::commands::serve::livereloadreactor#stop()","jekyll::utils#stringify_hash_keys()","jekyll::configuration#stringify_keys()","jekyll::utils::ansi#strip()","jekyll::filters::urlfilters#strip_index()","jekyll::command::subclasses()","jekyll::document::superdirs_regex()","jekyll::utils#symbolize_hash_keys()","jekyll#symlink?()","jekyll#symlink_outside_site_source?()","jekyll::tags::includetag#syntax_example()","jekyll::profiler::tabulate()","jekyll::tags::includerelativetag#tag_includes_dirs()","jekyll::tags::includetag#tag_includes_dirs()","jekyll::tags::link::tag_name()","jekyll::site#tags()","jekyll::commands::serve::bodyprocessor#template()","jekyll::page#template()","jekyll::themebuilder::erbrenderer#theme_directories()","jekyll::layoutreader#theme_layout_directory()","jekyll::converters::markdown#third_party_processors()","jekyll::drops::urldrop#title()","jekyll::utils#titleize_slug()","jekyll::drops::drop#to_h()","jekyll::drops::jekylldrop#to_h()","jekyll::drops::drop#to_hash()","kramdown::jekylldocument#to_html()","jekyll::filters#to_integer()","jekyll::drops::drop#to_json()","jekyll::drops::jekylldrop#to_json()","jekyll::collection#to_liquid()","jekyll::convertible#to_liquid()","jekyll::document#to_liquid()","jekyll::excerpt#to_liquid()","jekyll::pageexcerpt#to_liquid()","jekyll::site#to_liquid()","jekyll::staticfile#to_liquid()","jekyll::convertible#to_s()","jekyll::document#to_s()","jekyll::drops::collectiondrop#to_s()","jekyll::excerpt#to_s()","jekyll::inclusion#to_s()","jekyll::liquidrenderer::table#to_s()","jekyll::url#to_s()","jekyll::convertible#transform()","jekyll::utils#transform_keys()","jekyll::hooks::trigger()","jekyll::document#trigger_hooks()","jekyll::excerpt#trigger_hooks()","jekyll::page#trigger_hooks()","jekyll::convertible#type()","jekyll::staticfile#type()","jekyll::url::unescape_path()","jekyll::utils::platforms#unix?()","jekyll::filters#unshift()","jekyll::frontmatterdefaults#update_deprecated_types()","jekyll::filters#uri_escape()","jekyll::document#url()","jekyll::page#url()","jekyll::staticfile#url()","jekyll::document#url_placeholders()","jekyll::page#url_placeholders()","jekyll::collection#url_template()","jekyll::document#url_template()","jekyll::commands::doctor::urls_only_differ_by_case()","jekyll::themebuilder#user_email()","jekyll::themebuilder#user_name()","jekyll::tags::includetag#valid_include_file?()","jekyll::converters::markdown#valid_processors()","jekyll::configuration#validate()","jekyll::convertible#validate_data!()","jekyll::tags::includetag#validate_file_name()","jekyll::tags::includetag#validate_params()","jekyll::convertible#validate_permalink!()","jekyll::utils#value_from_plural_key()","jekyll::utils#value_from_singular_key()","jekyll::utils::platforms#vanilla_windows?()","jekyll::configuration#verbose()","jekyll::configuration#verbose?()","jekyll::drops::jekylldrop#version()","jekyll::external::version_constraint()","jekyll::drops::urldrop#w_day()","jekyll::drops::urldrop#w_year()","jekyll::utils::threadevent#wait()","jekyll::logadapter#warn()","jekyll::stevenson#warn()","jekyll::liquidrenderer::file#warnings()","jekyll::commands::build::watch()","jekyll::drops::urldrop#week()","jekyll::filters#where()","jekyll::filters#where_exp()","jekyll::pluginmanager#whitelist()","jekyll::utils::platforms#windows?()","jekyll::convertible#write()","jekyll::document#write()","jekyll::logadapter#write()","jekyll::site#write()","jekyll::staticfile#write()","jekyll::collection#write?()","jekyll::document#write?()","jekyll::page#write?()","jekyll::staticfile#write?()","jekyll::logadapter#write_message?()","jekyll::regenerator#write_metadata()","jekyll::filters#xml_escape()","jekyll::drops::urldrop#y_day()","jekyll::document#yaml_file?()","jekyll::drops::urldrop#year()","","","","","","","","","","","","","","","",""],"info":[["Jekyll","","Jekyll.html","","<p>Convertible provides methods for converting a pagelike item from a certain type of markup into actual …\n"],["Jekyll::Cache","","Jekyll/Cache.html","",""],["Jekyll::Cleaner","","Jekyll/Cleaner.html","","<p>Handles the cleanup of a site&#39;s destination before it is built.\n"],["Jekyll::Collection","","Jekyll/Collection.html","",""],["Jekyll::CollectionReader","","Jekyll/CollectionReader.html","",""],["Jekyll::Command","","Jekyll/Command.html","",""],["Jekyll::Commands","","Jekyll/Commands.html","",""],["Jekyll::Commands::Build","","Jekyll/Commands/Build.html","",""],["Jekyll::Commands::Clean","","Jekyll/Commands/Clean.html","",""],["Jekyll::Commands::Doctor","","Jekyll/Commands/Doctor.html","",""],["Jekyll::Commands::Help","","Jekyll/Commands/Help.html","",""],["Jekyll::Commands::New","","Jekyll/Commands/New.html","",""],["Jekyll::Commands::NewTheme","","Jekyll/Commands/NewTheme.html","",""],["Jekyll::Commands::Serve","","Jekyll/Commands/Serve.html","",""],["Jekyll::Commands::Serve::BodyProcessor","","Jekyll/Commands/Serve/BodyProcessor.html","","<p>This class inserts the LiveReload script tags into HTML as it is served\n"],["Jekyll::Commands::Serve::HttpAwareConnection","","Jekyll/Commands/Serve/HttpAwareConnection.html","","<p>The LiveReload protocol requires the server to serve livereload.js over HTTP despite the fact that the …\n"],["Jekyll::Commands::Serve::LiveReloadReactor","","Jekyll/Commands/Serve/LiveReloadReactor.html","",""],["Jekyll::Commands::Serve::Servlet","","Jekyll/Commands/Serve/Servlet.html","",""],["Jekyll::Commands::Serve::SkipAnalyzer","","Jekyll/Commands/Serve/SkipAnalyzer.html","","<p>This class is used to determine if the Servlet should modify a served file to insert the LiveReload script …\n"],["Jekyll::Configuration","","Jekyll/Configuration.html","",""],["Jekyll::Converter","","Jekyll/Converter.html","",""],["Jekyll::Converters","","Jekyll/Converters.html","",""],["Jekyll::Converters::Identity","","Jekyll/Converters/Identity.html","","<p>Identity converter. Returns same content as given. For more info on converters see jekyllrb.com/docs/plugins/converters …\n"],["Jekyll::Converters::Markdown","","Jekyll/Converters/Markdown.html","","<p>Markdown converter. For more info on converters see jekyllrb.com/docs/plugins/converters/\n"],["Jekyll::Converters::Markdown::KramdownParser","","Jekyll/Converters/Markdown/KramdownParser.html","",""],["Jekyll::Converters::SmartyPants","","Jekyll/Converters/SmartyPants.html","","<p>SmartyPants converter. For more info on converters see jekyllrb.com/docs/plugins/converters/\n"],["Jekyll::Convertible","","Jekyll/Convertible.html","",""],["Jekyll::DataReader","","Jekyll/DataReader.html","",""],["Jekyll::Deprecator","","Jekyll/Deprecator.html","",""],["Jekyll::Document","","Jekyll/Document.html","",""],["Jekyll::Drops","","Jekyll/Drops.html","",""],["Jekyll::Drops::CollectionDrop","","Jekyll/Drops/CollectionDrop.html","",""],["Jekyll::Drops::DocumentDrop","","Jekyll/Drops/DocumentDrop.html","",""],["Jekyll::Drops::Drop","","Jekyll/Drops/Drop.html","",""],["Jekyll::Drops::ExcerptDrop","","Jekyll/Drops/ExcerptDrop.html","",""],["Jekyll::Drops::JekyllDrop","","Jekyll/Drops/JekyllDrop.html","",""],["Jekyll::Drops::SiteDrop","","Jekyll/Drops/SiteDrop.html","",""],["Jekyll::Drops::StaticFileDrop","","Jekyll/Drops/StaticFileDrop.html","",""],["Jekyll::Drops::UnifiedPayloadDrop","","Jekyll/Drops/UnifiedPayloadDrop.html","",""],["Jekyll::Drops::UrlDrop","","Jekyll/Drops/UrlDrop.html","",""],["Jekyll::EntryFilter","","Jekyll/EntryFilter.html","",""],["Jekyll::Errors","","Jekyll/Errors.html","",""],["Jekyll::Excerpt","","Jekyll/Excerpt.html","",""],["Jekyll::External","","Jekyll/External.html","",""],["Jekyll::Filters","","Jekyll/Filters.html","",""],["Jekyll::Filters::DateFilters","","Jekyll/Filters/DateFilters.html","",""],["Jekyll::Filters::GroupingFilters","","Jekyll/Filters/GroupingFilters.html","",""],["Jekyll::Filters::URLFilters","","Jekyll/Filters/URLFilters.html","",""],["Jekyll::FrontmatterDefaults","","Jekyll/FrontmatterDefaults.html","","<p>This class handles custom defaults for YAML frontmatter settings. These are set in _config.yml and apply …\n"],["Jekyll::Hooks","","Jekyll/Hooks.html","",""],["Jekyll::Inclusion","","Jekyll/Inclusion.html","",""],["Jekyll::Layout","","Jekyll/Layout.html","",""],["Jekyll::LayoutReader","","Jekyll/LayoutReader.html","",""],["Jekyll::LiquidExtensions","","Jekyll/LiquidExtensions.html","",""],["Jekyll::LiquidRenderer","","Jekyll/LiquidRenderer.html","",""],["Jekyll::LiquidRenderer::File","","Jekyll/LiquidRenderer/File.html","",""],["Jekyll::LiquidRenderer::Table","","Jekyll/LiquidRenderer/Table.html","",""],["Jekyll::LogAdapter","","Jekyll/LogAdapter.html","",""],["Jekyll::Page","","Jekyll/Page.html","",""],["Jekyll::PageExcerpt","","Jekyll/PageExcerpt.html","",""],["Jekyll::PageReader","","Jekyll/PageReader.html","",""],["Jekyll::PageWithoutAFile","","Jekyll/PageWithoutAFile.html","","<p>A Jekyll::Page subclass to handle processing files without reading it to determine the page-data and …\n"],["Jekyll::PathManager","","Jekyll/PathManager.html","","<p>A singleton class that caches frozen instances of path strings returned from its methods.\n<p>NOTE:\n\n<pre>This class ...</pre>\n"],["Jekyll::Plugin","","Jekyll/Plugin.html","",""],["Jekyll::PluginManager","","Jekyll/PluginManager.html","",""],["Jekyll::PostReader","","Jekyll/PostReader.html","",""],["Jekyll::Profiler","","Jekyll/Profiler.html","",""],["Jekyll::Publisher","","Jekyll/Publisher.html","",""],["Jekyll::Reader","","Jekyll/Reader.html","",""],["Jekyll::Regenerator","","Jekyll/Regenerator.html","",""],["Jekyll::RelatedPosts","","Jekyll/RelatedPosts.html","",""],["Jekyll::Renderer","","Jekyll/Renderer.html","",""],["Jekyll::Site","","Jekyll/Site.html","",""],["Jekyll::StaticFile","","Jekyll/StaticFile.html","",""],["Jekyll::StaticFileReader","","Jekyll/StaticFileReader.html","",""],["Jekyll::Stevenson","","Jekyll/Stevenson.html","",""],["Jekyll::Tags","","Jekyll/Tags.html","",""],["Jekyll::Tags::HighlightBlock","","Jekyll/Tags/HighlightBlock.html","",""],["Jekyll::Tags::IncludeRelativeTag","","Jekyll/Tags/IncludeRelativeTag.html","",""],["Jekyll::Tags::IncludeTag","","Jekyll/Tags/IncludeTag.html","",""],["Jekyll::Tags::Link","","Jekyll/Tags/Link.html","",""],["Jekyll::Tags::OptimizedIncludeTag","","Jekyll/Tags/OptimizedIncludeTag.html","","<p>Do not inherit from this class. TODO: Merge into the `Jekyll::Tags::IncludeTag` in v5.0\n"],["Jekyll::Tags::PostComparer","","Jekyll/Tags/PostComparer.html","",""],["Jekyll::Tags::PostUrl","","Jekyll/Tags/PostUrl.html","",""],["Jekyll::Theme","","Jekyll/Theme.html","",""],["Jekyll::ThemeAssetsReader","","Jekyll/ThemeAssetsReader.html","",""],["Jekyll::ThemeBuilder","","Jekyll/ThemeBuilder.html","",""],["Jekyll::ThemeBuilder::ERBRenderer","","Jekyll/ThemeBuilder/ERBRenderer.html","",""],["Jekyll::URL","","Jekyll/URL.html","",""],["Jekyll::Utils","","Jekyll/Utils.html","",""],["Jekyll::Utils::Ansi","","Jekyll/Utils/Ansi.html","",""],["Jekyll::Utils::Exec","","Jekyll/Utils/Exec.html","",""],["Jekyll::Utils::Internet","","Jekyll/Utils/Internet.html","",""],["Jekyll::Utils::Platforms","","Jekyll/Utils/Platforms.html","",""],["Jekyll::Utils::ThreadEvent","","Jekyll/Utils/ThreadEvent.html","","<p>Based on the pattern and code from emptysqua.re/blog/an-event-synchronization-primitive-for-ruby/\n"],["Jekyll::Utils::WinTZ","","Jekyll/Utils/WinTZ.html","",""],["Kramdown","","Kramdown.html","",""],["Kramdown::JekyllDocument","","Kramdown/JekyllDocument.html","","<p>A Kramdown::Document subclass meant to optimize memory usage from initializing a kramdown document for …\n"],["Kramdown::Parser","","Kramdown/Parser.html","",""],["Kramdown::Parser::SmartyPants","","Kramdown/Parser/SmartyPants.html","",""],["Object","","Object.html","",""],["SafeYAML","","SafeYAML.html","",""],["<=>","Jekyll::Document","Jekyll/Document.html#method-i-3C-3D-3E","(other)","<p>Compare this document against another document. Comparison is a comparison between the 2 paths of the …\n"],["<=>","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-3C-3D-3E","(other)",""],["<=>","Jekyll::Plugin","Jekyll/Plugin.html#method-c-3C-3D-3E","(other)","<p>Spaceship is priority [higher -&gt; lower]\n<p>other - The class to be compared.\n<p>Returns -1, 0, 1.\n"],["<=>","Jekyll::Plugin","Jekyll/Plugin.html#method-i-3C-3D-3E","(other)","<p>Spaceship is priority [higher -&gt; lower]\n<p>other - The class to be compared.\n<p>Returns -1, 0, 1.\n"],["==","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-3D-3D","(other)",""],["[]","Jekyll::Cache","Jekyll/Cache.html#method-i-5B-5D","(key)","<p>Retrieve a cached item Raises if key does not exist in cache\n<p>Returns cached value\n"],["[]","Jekyll::Convertible","Jekyll/Convertible.html#method-i-5B-5D","(property)","<p>Accessor for data properties by Liquid.\n<p>property - The String name of the property to retrieve.\n<p>Returns …\n"],["[]","Jekyll::Document","Jekyll/Document.html#method-i-5B-5D","(key)",""],["[]","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-5B-5D","(key)","<p>Access a method in the Drop or a field in the underlying hash data. If mutable, checks the mutations …\n"],["[]","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-5B-5D","(key)",""],["[]=","Jekyll::Cache","Jekyll/Cache.html#method-i-5B-5D-3D","(key, value)","<p>Add an item to cache\n<p>Returns nothing.\n"],["[]=","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-5B-5D-3D","(key, val)","<p>Set a field in the Drop. If mutable, sets in the mutations and returns. If not mutable, checks first …\n"],["abort_with","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-abort_with","(topic, message = nil, &block)","<p>Public: Print an error message and immediately abort the process\n<p>topic - the topic of the message, e.g. …\n"],["absolute_url","Jekyll::Filters::URLFilters","Jekyll/Filters/URLFilters.html#method-i-absolute_url","(input)","<p>Produces an absolute URL based on site.url and site.baseurl.\n<p>input - the URL to make absolute.\n<p>Returns …\n"],["add","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-add","(path)","<p>Add a path to the metadata\n<p>Returns true, also on failure.\n"],["add","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-add","(severity, message = nil, progname = nil)",""],["add_build_options","Jekyll::Command","Jekyll/Command.html#method-c-add_build_options","(cmd)","<p>Add common options to a command for building configuration\n<p>cmd - the Jekyll::Command to add these options …\n"],["add_default_collections","Jekyll::Configuration","Jekyll/Configuration.html#method-i-add_default_collections","()",""],["add_default_excludes","Jekyll::Configuration","Jekyll/Configuration.html#method-i-add_default_excludes","()",""],["add_dependency","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-add_dependency","(path, dependency)","<p>Add a dependency of a path\n<p>Returns nothing.\n"],["add_include_to_dependency","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-add_include_to_dependency","(site, path, context)",""],["add_permalink_suffix","Jekyll::Utils","Jekyll/Utils.html#method-i-add_permalink_suffix","(template, permalink_style)","<p>Add an appropriate suffix to template so that it matches the specified permalink style.\n<p>template - permalink …\n"],["adjust_verbosity","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-adjust_verbosity","(options = {})",""],["all","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-all","(path, type)","<p>Collects a hash with all default values for a page or post\n<p>path - the relative path of the page or post …\n"],["arg_is_present?","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-arg_is_present-3F","(args, deprecated_argument, message)",""],["array_to_sentence_string","Jekyll::Filters","Jekyll/Filters.html#method-i-array_to_sentence_string","(array, connector = \"and\")","<p>Join an array of things into a string by separating with commas and the word “and” for the …\n"],["asset_file?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-asset_file-3F","()","<p>Determine whether the document is an asset file. Asset files include CoffeeScript files and Sass/SCSS …\n"],["asset_file?","Jekyll::Document","Jekyll/Document.html#method-i-asset_file-3F","()","<p>Determine whether the document is an asset file. Asset files include CoffeeScript files and Sass/SCSS …\n"],["assets_path","Jekyll::Theme","Jekyll/Theme.html#method-i-assets_path","()",""],["backup?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-backup-3F","(entry)",""],["bad_browser?","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-i-bad_browser-3F","()",""],["base_directory","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-base_directory","()",""],["basename","Jekyll::Document","Jekyll/Document.html#method-i-basename","()","<p>The base filename of the document.\n<p>Returns the base filename of the document.\n"],["basename","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-basename","()","<p>Generate “basename without extension” and strip away any trailing periods. NOTE: `String#gsub` …\n"],["basename","Jekyll::Theme","Jekyll/Theme.html#method-i-basename","()","<p>The name of theme directory\n"],["basename_without_ext","Jekyll::Document","Jekyll/Document.html#method-i-basename_without_ext","()","<p>The base filename of the document, without the file extname.\n<p>Returns the basename without the file extname. …\n"],["bash_on_windows?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-bash_on_windows-3F","()","<p>Determine if Windows Subsystem for Linux (WSL)\n"],["blank_template","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-blank_template","()",""],["blessed_gems","Jekyll::External","Jekyll/External.html#method-c-blessed_gems","()","<p>Gems that, if installed, should be loaded. Usually contain subcommands.\n"],["build","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-build","(site, options)","<p>Build your Jekyll site.\n<p>site - the Jekyll::Site instance to build options - A Hash of options passed to …\n"],["build","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-build","()",""],["build_index","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-build_index","()",""],["cache","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-cache","()","<p>A persistent cache to store and retrieve parsed templates based on the filename via `LiquidRenderer::File#parse` …\n"],["calculate","Jekyll::Utils::WinTZ","Jekyll/Utils/WinTZ.html#method-i-calculate","(timezone)","<p>Public: Calculate the Timezone for Windows when the config file has a defined\n\n<pre>&#39;timezone&#39; key.</pre>\n<p>timezone …\n"],["catch_inheritance","Jekyll::Plugin","Jekyll/Plugin.html#method-c-catch_inheritance","(const)",""],["categories","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-categories","()",""],["categories","Jekyll::Site","Jekyll/Site.html#method-i-categories","()",""],["categories_from_path","Jekyll::Document","Jekyll/Document.html#method-i-categories_from_path","(special_dir)","<p>Add superdirectories of the special_dir to categories. In the case of es/_posts, &#39;es&#39; is added …\n"],["cgi_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-cgi_escape","(input)","<p>CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. …\n"],["chunked?","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-i-chunked-3F","()",""],["cleaned_relative_path","Jekyll::Document","Jekyll/Document.html#method-i-cleaned_relative_path","()","<p>Produces a “cleaned” relative path. The “cleaned” relative path is the relative path …\n"],["cleaned_relative_path","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-cleaned_relative_path","()","<p>Similar to Jekyll::Document#cleaned_relative_path. Generates a relative path with the collection&#39;s …\n"],["cleanup","Jekyll::Site","Jekyll/Site.html#method-i-cleanup","()","<p>Remove orphaned files and empty directories in destination.\n<p>Returns nothing.\n"],["cleanup!","Jekyll::Cleaner","Jekyll/Cleaner.html#method-i-cleanup-21","()","<p>Cleans up the site&#39;s destination directory\n"],["clear","Jekyll::Cache","Jekyll/Cache.html#method-c-clear","()","<p>Clear all caches\n"],["clear","Jekyll::Cache","Jekyll/Cache.html#method-i-clear","()","<p>Clear this particular cache\n"],["clear","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-clear","()","<p>Clear the metadata and cache\n<p>Returns nothing\n"],["clear_cache","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-clear_cache","()","<p>Clear just the cache\n<p>Returns nothing\n"],["clear_if_config_changed","Jekyll::Cache","Jekyll/Cache.html#method-c-clear_if_config_changed","(config)","<p>Compare the current config to the cached config If they are different, clear all caches\n<p>Returns nothing. …\n"],["close","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-close","()",""],["coffeescript_file?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-coffeescript_file-3F","()","<p>Determine whether the document is a CoffeeScript file.\n<p>Returns true if extname == .coffee, false otherwise. …\n"],["coffeescript_file?","Jekyll::Document","Jekyll/Document.html#method-i-coffeescript_file-3F","()","<p>Determine whether the document is a CoffeeScript file.\n<p>Returns true if extname == .coffee, false otherwise. …\n"],["collapse_document","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-collapse_document","(doc)","<p>Generate a Hash which breaks the recursive chain. Certain fields which are normally available are omitted. …\n"],["collection","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-collection","()",""],["collection","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-collection","()",""],["collection_dir","Jekyll::Collection","Jekyll/Collection.html#method-i-collection_dir","(*files)","<p>The full path to the directory containing the collection, with\n\n<pre>optional subpaths.</pre>\n<p>*files - (optional) any …\n"],["collection_names","Jekyll::Site","Jekyll/Site.html#method-i-collection_names","()","<p>The list of collection names.\n<p>Returns an array of collection names from the configuration,\n\n<pre>or an empty ...</pre>\n"],["collections","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-collections","()",""],["collections","Jekyll::Site","Jekyll/Site.html#method-i-collections","()","<p>The list of collections and their corresponding Jekyll::Collection instances. If config is set, a new …\n"],["collections_path","Jekyll::Site","Jekyll/Site.html#method-i-collections_path","()","<p>Public: The full path to the directory that houses all the collections registered with the current site. …\n"],["config","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-config","()","<p>return nil for `{{ site.config }}` even if –config was passed via CLI\n"],["config=","Jekyll::Site","Jekyll/Site.html#method-i-config-3D","(config)","<p>Public: Set the site&#39;s configuration. This handles side-effects caused by changing values in the …\n"],["config_files","Jekyll::Configuration","Jekyll/Configuration.html#method-i-config_files","(override)","<p>Public: Generate list of configuration files from the override\n<p>override - the command-line options hash …\n"],["configuration","Jekyll","Jekyll.html#method-c-configuration","(override = {})","<p>Public: Generate a Jekyll configuration Hash by merging the default options with anything in _config.yml …\n"],["configuration_from_options","Jekyll::Command","Jekyll/Command.html#method-c-configuration_from_options","(options)","<p>Create a full Jekyll configuration with the options passed in as overrides\n<p>options - the configuration …\n"],["conflicting_urls","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-conflicting_urls","(site)",""],["connected?","Jekyll::Utils::Internet","Jekyll/Utils/Internet.html#method-i-connected-3F","()","<p>Public: Determine whether the present device has a connection to the Internet. This allows plugin writers …\n"],["conscientious_require","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-conscientious_require","()","<p>Require all the plugins which are allowed.\n<p>Returns nothing\n"],["content","Jekyll::Inclusion","Jekyll/Inclusion.html#method-i-content","()",""],["content_methods","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-content_methods","()","<p>Generates a list of strings which correspond to content getter methods.\n<p>Returns an Array of strings which …\n"],["convert","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-convert","(content)","<p>Logic to do the content conversion.\n<p>content - String content of file (without front matter).\n<p>Returns a …\n"],["convert","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-convert","(content)","<p>Logic to do the content conversion.\n<p>content - String content of file (without front matter).\n<p>Returns a …\n"],["convert","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-i-convert","(content)","<p>Logic to do the content conversion.\n<p>content - String content of file (without front matter).\n<p>Returns a …\n"],["convert","Jekyll::Renderer","Jekyll/Renderer.html#method-i-convert","(content)","<p>Convert the document using the converters which match this renderer&#39;s document.\n<p>Returns String the …\n"],["converters","Jekyll::Convertible","Jekyll/Convertible.html#method-i-converters","()","<p>Determine which converter to use based on this convertible&#39;s extension.\n<p>Returns the Converter instance. …\n"],["converters","Jekyll::Renderer","Jekyll/Renderer.html#method-i-converters","()","<p>Determine which converters to use based on this document&#39;s extension.\n<p>Returns Array of Converter instances. …\n"],["create!","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-create-21","()",""],["create_blank_site","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-create_blank_site","(path)",""],["csv_to_array","Jekyll::Configuration","Jekyll/Configuration.html#method-i-csv_to_array","(csv)","<p>Public: Split a CSV string into an array containing its values\n<p>csv - the string of comma-separated values …\n"],["data","Jekyll::Document","Jekyll/Document.html#method-i-data","()","<p>Fetch the Document&#39;s data.\n<p>Returns a Hash containing the data. An empty hash is returned if\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">no</span> <span class=\"ruby-identifier\">data</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["data","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-data","()","<p>Fetch YAML front-matter data from related doc, without layout key\n<p>Returns Hash of doc data\n"],["data","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-data","()",""],["data_delegator","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-data_delegator","(key)","<p>Generate public Drop instance_methods for given string `key`. The generated method access(es) `@obj`&#39;s …\n"],["data_delegators","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-data_delegators","(*strings)","<p>Generate public Drop instance_methods for each string entry in the given list. The generated method(s) …\n"],["date","Jekyll::Document","Jekyll/Document.html#method-i-date","()","<p>Returns the document date. If metadata is not present then calculates it based on Jekyll::Site#time or …\n"],["date","Jekyll::Drops::ExcerptDrop","Jekyll/Drops/ExcerptDrop.html#method-i-date","()",""],["date_to_long_string","Jekyll::Filters::DateFilters","Jekyll/Filters/DateFilters.html#method-i-date_to_long_string","(date, type = nil, style = nil)","<p>Format a date in long format e.g. “27 January 2011”. Ordinal format is also supported, in both …\n"],["date_to_rfc822","Jekyll::Filters::DateFilters","Jekyll/Filters/DateFilters.html#method-i-date_to_rfc822","(date)","<p>Format a date according to RFC-822\n<p>date - The Time to format.\n<p>Examples\n"],["date_to_string","Jekyll::Filters::DateFilters","Jekyll/Filters/DateFilters.html#method-i-date_to_string","(date, type = nil, style = nil)","<p>Format a date in short format e.g. “27 Jan 2011”. Ordinal format is also supported, in both …\n"],["date_to_xmlschema","Jekyll::Filters::DateFilters","Jekyll/Filters/DateFilters.html#method-i-date_to_xmlschema","(date)","<p>Format a date for use in XML.\n<p>date - The Time to format.\n<p>Examples\n"],["day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-day","()","<p>DD: 01..31\n"],["debug","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-debug","(topic, message = nil, &block)","<p>Public: Print a debug message\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”, …\n"],["deep_merge_hashes","Jekyll::Utils","Jekyll/Utils.html#method-i-deep_merge_hashes","(master_hash, other_hash)","<p>Non-destructive version of deep_merge_hashes! See that method.\n<p>Returns the merged hashes.\n"],["deep_merge_hashes!","Jekyll::Utils","Jekyll/Utils.html#method-i-deep_merge_hashes-21","(target, overwrite)","<p>Merges a master hash with another hash, recursively.\n<p>master_hash - the “parent” hash whose values …\n"],["defaults","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-defaults","()","<p>Returns the front matter defaults defined for the file&#39;s URL and/or type as defined in _config.yml. …\n"],["defaults_deprecate_type","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-defaults_deprecate_type","(old, current)",""],["delegate_method","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-delegate_method","(symbol)","<p>Generate public Drop instance_method for given symbol that calls `@obj.&lt;sym&gt;`.\n<p>Returns delegated …\n"],["delegate_method_as","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-delegate_method_as","(original, delegate)","<p>Generate public Drop instance_method named `delegate` that calls `@obj.&lt;original&gt;`.\n<p>Returns delegated …\n"],["delegate_methods","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-delegate_methods","(*symbols)","<p>Generate public Drop instance_methods for each symbol in the given list.\n<p>Returns nothing.\n"],["delete","Jekyll::Cache","Jekyll/Cache.html#method-i-delete","(key)","<p>Remove one particular item from the cache\n<p>Returns nothing.\n"],["deprecated_equality","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-deprecated_equality","(other)",""],["deprecated_relative_permalinks","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-deprecated_relative_permalinks","(site)",""],["deprecation_checks","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-deprecation_checks","()",""],["deprecation_message","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-deprecation_message","(message)",""],["derive_base_directory","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-derive_base_directory","(site, base_dir)",""],["descendants","Jekyll::Plugin","Jekyll/Plugin.html#method-c-descendants","()",""],["destination","Jekyll::Document","Jekyll/Document.html#method-i-destination","(base_directory)","<p>The full path to the output file.\n<p>base_directory - the base path of the output directory\n<p>Returns the full …\n"],["destination","Jekyll::Page","Jekyll/Page.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns the destination file path …\n"],["destination","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns destination file path. …\n"],["destination_rel_dir","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-destination_rel_dir","()",""],["dir","Jekyll::Page","Jekyll/Page.html#method-i-dir","()","<p>The generated directory into which the page will be placed upon generation. This is derived from the …\n"],["directory","Jekyll::Collection","Jekyll/Collection.html#method-i-directory","()","<p>The full path to the directory containing the collection.\n<p>Returns a String containing th directory name …\n"],["disable_disk_cache!","Jekyll::Cache","Jekyll/Cache.html#method-c-disable_disk_cache-21","()","<p>Disable Marshaling cached items to disk\n"],["disabled?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-disabled-3F","()","<p>Check if metadata has been disabled\n<p>Returns a Boolean (true for disabled, false for enabled).\n"],["disk_cache_enabled?","Jekyll::Cache","Jekyll/Cache.html#method-i-disk_cache_enabled-3F","()",""],["dispatch","Jekyll::Commands::Serve::HttpAwareConnection","Jekyll/Commands/Serve/HttpAwareConnection.html#method-i-dispatch","(data)","<p>rubocop:disable Metrics/MethodLength\n"],["dns","Jekyll::Utils::Internet","Jekyll/Utils/Internet.html#method-i-dns","(domain)",""],["do_GET","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-do_GET","(req, res)","<p>rubocop:disable Naming/MethodName\n"],["do_layout","Jekyll::Convertible","Jekyll/Convertible.html#method-i-do_layout","(payload, layouts)","<p>Add any necessary layouts to this convertible document.\n<p>payload - The site payload Drop or Hash. layouts …\n"],["docs","Jekyll::Collection","Jekyll/Collection.html#method-i-docs","()","<p>Fetch the Documents in this collection. Defaults to an empty array if no documents have been read in. …\n"],["docs_to_write","Jekyll::Site","Jekyll/Site.html#method-i-docs_to_write","()","<p>Get the to be written documents\n<p>Returns an Array of Documents which should be written\n"],["documents","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-documents","()","<p>`Site#documents` cannot be memoized so that `Site#docs_to_write` can access the latest state of the attribute. …\n"],["documents","Jekyll::Site","Jekyll/Site.html#method-i-documents","()","<p>Get all the documents\n<p>Returns an Array of all Documents\n"],["draft?","Jekyll::Document","Jekyll/Document.html#method-i-draft-3F","()","<p>Returns whether the document is a draft. This is only the case if the document is in the &#39;posts&#39; …\n"],["duplicable?","Jekyll::Utils","Jekyll/Utils.html#method-i-duplicable-3F","(obj)",""],["each","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-each","()",""],["each_key","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-each_key","(&block)","<p>Collects all the keys and passes each to the block in turn.\n<p>block - a block which accepts one argument, …\n"],["each_site_file","Jekyll::Site","Jekyll/Site.html#method-i-each_site_file","()",""],["ensure_not_in_dest","Jekyll::Site","Jekyll/Site.html#method-i-ensure_not_in_dest","()","<p>Check that the destination dir isn&#39;t the source dir or a directory parent to the source dir.\n"],["ensure_time!","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-ensure_time-21","(set)",""],["entries","Jekyll::Collection","Jekyll/Collection.html#method-i-entries","()","<p>All the entries in this collection.\n<p>Returns an Array of file paths to the documents in this collection …\n"],["entry_filter","Jekyll::Collection","Jekyll/Collection.html#method-i-entry_filter","()","<p>The entry filter for this collection. Creates an instance of Jekyll::EntryFilter.\n<p>Returns the instance …\n"],["env","Jekyll","Jekyll.html#method-c-env","()","<p>Public: Tells you which Jekyll environment you are building in so you can skip tasks if you need to. …\n"],["environment","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-environment","()",""],["error","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-error","(topic, message = nil, &block)","<p>Public: Print an error message\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["error","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message\n"],["escape_path","Jekyll::URL","Jekyll/URL.html#method-c-escape_path","(path)","<p>Escapes a path to be a valid URL path segment\n<p>path - The path to be escaped.\n<p>Examples:\n"],["excerpt","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-excerpt","()",""],["excerpt","Jekyll::Drops::ExcerptDrop","Jekyll/Drops/ExcerptDrop.html#method-i-excerpt","()",""],["excerpt","Jekyll::Page","Jekyll/Page.html#method-i-excerpt","()",""],["excerpt_separator","Jekyll::Document","Jekyll/Document.html#method-i-excerpt_separator","()","<p>The Document excerpt_separator, from the YAML Front-Matter or site default excerpt_separator value\n<p>Returns …\n"],["excerpt_separator","Jekyll::Page","Jekyll/Page.html#method-i-excerpt_separator","()",""],["excluded?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-excluded-3F","(entry)",""],["exists?","Jekyll::Collection","Jekyll/Collection.html#method-i-exists-3F","()","<p>Checks whether the directory “exists” for this collection. The directory must exist on the …\n"],["extname_list","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-extname_list","()",""],["extract_excerpt","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-extract_excerpt","(doc_content)",""],["extract_metadata","Jekyll::Collection","Jekyll/Collection.html#method-i-extract_metadata","()","<p>Extract options for this collection from the site configuration.\n<p>Returns the metadata for this collection …\n"],["fetch","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-fetch","(key, default = nil, &block)","<p>Imitate Hash.fetch method in Drop\n<p>Returns value if key is present in Drop, otherwise returns default value …\n"],["file","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-file","(filename)",""],["file_read_opts","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-file_read_opts","(context)","<p>Grab file read opts in the context\n"],["files","Jekyll::Collection","Jekyll/Collection.html#method-i-files","()","<p>Fetch the static files in this collection. Defaults to an empty array if no static files have been read …\n"],["filter","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-filter","(entries)",""],["filter_entries","Jekyll::Reader","Jekyll/Reader.html#method-i-filter_entries","(entries, base_directory = nil)","<p>Filter out any files/directories that are hidden or backup files (start with “.” or “#” …\n"],["filtered_entries","Jekyll::Collection","Jekyll/Collection.html#method-i-filtered_entries","()","<p>Filtered version of the entries in this collection. See `Jekyll::EntryFilter#filter` for more information. …\n"],["find","Jekyll::Filters","Jekyll/Filters.html#method-i-find","(input, property, value)","<p>Search an array of objects and returns the first object that has the queried attribute with the given …\n"],["find","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-find","(path, type, setting)","<p>Finds a default value for a given setting, filtered by path and type\n<p>path - the path (relative to the …\n"],["find_converter_instance","Jekyll::Site","Jekyll/Site.html#method-i-find_converter_instance","(klass)","<p>Get the implementation class for the given Converter. Returns the Converter instance implementing the …\n"],["find_exp","Jekyll::Filters","Jekyll/Filters.html#method-i-find_exp","(input, variable, expression)","<p>Searches an array of objects against an expression and returns the first object for which the expression …\n"],["force","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-force","(path)","<p>Force a path to regenerate\n<p>Returns true.\n"],["format_error","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-c-format_error","(error, path)",""],["formatted_topic","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-formatted_topic","(topic, colon = false)","<p>Internal: Format the topic\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”, …\n"],["from","Jekyll::Configuration","Jekyll/Configuration.html#method-c-from","(user_config)","<p>Static: Produce a Configuration ready for use in a Site. It takes the input, fills in the defaults where …\n"],["frontmatter_defaults","Jekyll::Site","Jekyll/Site.html#method-i-frontmatter_defaults","()","<p>Returns the FrontmatterDefaults or creates a new FrontmatterDefaults if it doesn&#39;t already exist. …\n"],["fsnotify_buggy?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-fsnotify_buggy-3F","(_site)",""],["gemfile_exists?","Jekyll::PluginManager","Jekyll/PluginManager.html#method-c-gemfile_exists-3F","()","<p>Check for the existence of a Gemfile.\n<p>Returns true if a Gemfile exists in the places bundler will look …\n"],["generate","Jekyll::Site","Jekyll/Site.html#method-i-generate","()","<p>Run each of the Generators.\n<p>Returns nothing.\n"],["generate_excerpt?","Jekyll::Document","Jekyll/Document.html#method-i-generate_excerpt-3F","()","<p>Whether to generate an excerpt\n<p>Returns true if the excerpt separator is configured.\n"],["generate_excerpt?","Jekyll::Page","Jekyll/Page.html#method-i-generate_excerpt-3F","()",""],["generate_url","Jekyll::URL","Jekyll/URL.html#method-i-generate_url","(template)","<p>Internal: Generate the URL by replacing all placeholders with their respective values in the given template …\n"],["generate_url_from_drop","Jekyll::URL","Jekyll/URL.html#method-i-generate_url_from_drop","(template)",""],["generate_url_from_hash","Jekyll::URL","Jekyll/URL.html#method-i-generate_url_from_hash","(template)",""],["generated_permalink","Jekyll::URL","Jekyll/URL.html#method-i-generated_permalink","()","<p>Generates a URL from the permalink\n<p>Returns the _unsanitized String URL\n"],["generated_url","Jekyll::URL","Jekyll/URL.html#method-i-generated_url","()","<p>Generates a URL from the template\n<p>Returns the unsanitized String URL\n"],["get_config_value_with_override","Jekyll::Configuration","Jekyll/Configuration.html#method-i-get_config_value_with_override","(config_key, override)",""],["get_entries","Jekyll::Reader","Jekyll/Reader.html#method-i-get_entries","(dir, subfolder)","<p>Read the entries from a particular directory for processing\n<p>dir - The String representing the relative …\n"],["get_processor","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-get_processor","()","<p>RuboCop does not allow reader methods to have names starting with `get_` To ensure compatibility, this …\n"],["getset","Jekyll::Cache","Jekyll/Cache.html#method-i-getset","(key)","<p>If an item already exists in the cache, retrieve it. Else execute code block, and add the result to the …\n"],["getter_method_names","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-getter_method_names","()","<p>Array of stringified instance methods that do not end with the assignment operator.\n<p>(&lt;klass&gt;.instance_methods …\n"],["glob_include?","Jekyll","Jekyll.html#method-i-glob_include-3F","(enumerator, entry)","<p>Check if an entry matches a specific pattern. Returns true if path matches against any glob pattern, …\n"],["global","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-c-global","()",""],["group_by","Jekyll::Filters::GroupingFilters","Jekyll/Filters/GroupingFilters.html#method-i-group_by","(input, property)","<p>Group an array of items by a property\n<p>input - the inputted Enumerable property - the property\n<p>Returns an …\n"],["group_by_exp","Jekyll::Filters::GroupingFilters","Jekyll/Filters/GroupingFilters.html#method-i-group_by_exp","(input, variable, expression)","<p>Group an array of items by an expression\n<p>input - the object array variable - the variable to assign each …\n"],["handle_websockets_event","Jekyll::Commands::Serve::LiveReloadReactor","Jekyll/Commands/Serve/LiveReloadReactor.html#method-i-handle_websockets_event","(websocket)",""],["has?","Jekyll::Utils::Ansi","Jekyll/Utils/Ansi.html#method-i-has-3F","(str)",""],["has_liquid_construct?","Jekyll::Utils","Jekyll/Utils.html#method-i-has_liquid_construct-3F","(content)","<p>Determine whether the given content string contains Liquid Tags or Variables\n<p>Returns true is the string …\n"],["has_yaml_header?","Jekyll::Utils","Jekyll/Utils.html#method-i-has_yaml_header-3F","(file)","<p>Determines whether a given file has\n<p>Returns true if the YAML front matter is present. rubocop: disable …\n"],["hash_for_json","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-hash_for_json","(state = nil)","<p>Generate a Hash for use in generating JSON. This is useful if fields need to be cleared before the JSON …\n"],["hash_for_json","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-hash_for_json","(*)","<p>Generate a Hash for use in generating JSON. This is useful if fields need to be cleared before the JSON …\n"],["healthy?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-healthy-3F","(site)",""],["hidden_in_the_future?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-hidden_in_the_future-3F","(thing)",""],["highlighter_prefix","Jekyll::Converter","Jekyll/Converter.html#method-c-highlighter_prefix","(highlighter_prefix = nil)","<p>Public: Get or set the highlighter prefix. When an argument is specified, the prefix will be set. If …\n"],["highlighter_prefix","Jekyll::Converter","Jekyll/Converter.html#method-i-highlighter_prefix","()","<p>Get the highlighter prefix.\n<p>Returns the String prefix.\n"],["highlighter_suffix","Jekyll::Converter","Jekyll/Converter.html#method-c-highlighter_suffix","(highlighter_suffix = nil)","<p>Public: Get or set the highlighter suffix. When an argument is specified, the suffix will be set. If …\n"],["highlighter_suffix","Jekyll::Converter","Jekyll/Converter.html#method-i-highlighter_suffix","()","<p>Get the highlighter suffix.\n<p>Returns the String suffix.\n"],["hook_owner","Jekyll::Convertible","Jekyll/Convertible.html#method-i-hook_owner","()","<p>returns the owner symbol for hook triggering\n"],["hour","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-hour","()","<p>hh: 00..23\n"],["html?","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-i-html-3F","()",""],["html?","Jekyll::Page","Jekyll/Page.html#method-i-html-3F","()","<p>Returns the Boolean of whether this Page is HTML or not.\n"],["html_pages","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-html_pages","()",""],["i_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-i_day","()","<p>D: 1..31\n"],["i_month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-i_month","()","<p>M: 1..12\n"],["id","Jekyll::Document","Jekyll/Document.html#method-i-id","()",""],["id","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-id","()","<p>The UID for this doc (useful in feeds). e.g. /2008/11/05/my-awesome-doc\n<p>Returns the String UID.\n"],["in_cache_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_cache_dir","(*paths)","<p>Public: Prefix a given path with the cache directory.\n<p>paths - (optional) path elements to a file or directory …\n"],["in_dest_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_dest_dir","(*paths)","<p>Public: Prefix a given path with the destination directory.\n<p>paths - (optional) path elements to a file …\n"],["in_source_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_source_dir","(*paths)","<p>Public: Prefix a given path with the source directory.\n<p>paths - (optional) path elements to a file or directory …\n"],["in_theme_dir","Jekyll::Site","Jekyll/Site.html#method-i-in_theme_dir","(*paths)","<p>Public: Prefix a given path with the theme directory.\n<p>paths - (optional) path elements to a file or directory …\n"],["include?","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-include-3F","(something)","<p>Check if excerpt includes a string\n<p>Returns true if the string passed in\n"],["included?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-included-3F","(entry)",""],["includes_path","Jekyll::Theme","Jekyll/Theme.html#method-i-includes_path","()",""],["increment_bytes","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-increment_bytes","(filename, bytes)",""],["increment_count","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-increment_count","(filename)",""],["increment_time","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-increment_time","(filename, time)",""],["incremental?","Jekyll::Site","Jekyll/Site.html#method-i-incremental-3F","(override = {})","<p>Whether to perform a full rebuild without incremental regeneration\n<p>Returns a Boolean: true for a full …\n"],["index?","Jekyll::Page","Jekyll/Page.html#method-i-index-3F","()","<p>Returns the Boolean of whether this Page is an index file or not.\n"],["info","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-info","(topic, message = nil, &block)","<p>Public: Print a message\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”, …\n"],["inherited","Jekyll::Command","Jekyll/Command.html#method-c-inherited","(base)","<p>Keep a list of subclasses of Jekyll::Command every time it&#39;s inherited Called automatically.\n<p>base …\n"],["inherited","Jekyll::Plugin","Jekyll/Plugin.html#method-c-inherited","(const)",""],["init_with_program","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-init_with_program","(prog)","<p>Create the Mercenary command for the Jekyll CLI for this Command\n"],["init_with_program","Jekyll::Commands::Clean","Jekyll/Commands/Clean.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Help","Jekyll/Commands/Help.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::NewTheme","Jekyll/Commands/NewTheme.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-init_with_program","(prog)",""],["initialized_post_name","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-initialized_post_name","()","<p>Internal: Gets the filename of the sample post to be created\n<p>Returns the filename of the sample post, …\n"],["inline?","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-i-inline-3F","()",""],["insert_hook","Jekyll::Hooks","Jekyll/Hooks.html#method-c-insert_hook","(owner, event, priority, &block)",""],["inspect","Jekyll::Collection","Jekyll/Collection.html#method-i-inspect","()","<p>An inspect string.\n<p>Returns the inspect string\n"],["inspect","Jekyll::Document","Jekyll/Document.html#method-i-inspect","()","<p>The inspect string for this document. Includes the relative path and the collection label.\n<p>Returns the …\n"],["inspect","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-inspect","()","<p>Inspect the drop&#39;s keys and values through a JSON representation of its keys and values.\n<p>Returns a …\n"],["inspect","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-inspect","()","<p>Returns the shorthand String identifier of this doc.\n"],["inspect","Jekyll::Filters","Jekyll/Filters.html#method-i-inspect","(input)","<p>Convert an object into its String representation for debugging\n<p>input - The Object to be converted\n<p>Returns …\n"],["inspect","Jekyll::Inclusion","Jekyll/Inclusion.html#method-i-inspect","()",""],["inspect","Jekyll::Layout","Jekyll/Layout.html#method-i-inspect","()","<p>Returns the object as a debug String.\n"],["inspect","Jekyll::Page","Jekyll/Page.html#method-i-inspect","()","<p>Returns the object as a debug String.\n"],["inspect","Jekyll::PageExcerpt","Jekyll/PageExcerpt.html#method-i-inspect","()",""],["inspect","Jekyll::Site","Jekyll/Site.html#method-i-inspect","()","<p>Public\n<p>Returns the object as a debug String.\n"],["inspect","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-inspect","()","<p>Returns a debug string on inspecting the static file. Includes only the relative path of the object. …\n"],["instantiate_subclasses","Jekyll::Site","Jekyll/Site.html#method-i-instantiate_subclasses","(klass)","<p>klass - class or module containing the subclasses. Returns array of instances of subclasses of parameter. …\n"],["invalid_command","Jekyll::Commands::Help","Jekyll/Commands/Help.html#method-c-invalid_command","(prog, cmd)",""],["invalid_layout?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-invalid_layout-3F","(layout)","<p>Checks if the layout specified in the document actually exists\n<p>layout - the layout to check\n<p>Returns true …\n"],["invalid_layout?","Jekyll::Renderer","Jekyll/Renderer.html#method-i-invalid_layout-3F","(layout)","<p>Checks if the layout specified in the document actually exists\n<p>layout - the layout to check\n<p>Returns Boolean …\n"],["invoke_drop","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-invoke_drop","(key)",""],["jekyll","Jekyll::Drops::UnifiedPayloadDrop","Jekyll/Drops/UnifiedPayloadDrop.html#method-i-jekyll","()",""],["jekyll_version_with_minor","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-i-jekyll_version_with_minor","()",""],["join","Jekyll::PathManager","Jekyll/PathManager.html#method-c-join","(base, item)","<p>Wraps `File.join` to cache the frozen result. Reassigns `nil`, empty strings and empty arrays to a frozen …\n"],["jruby?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-jruby-3F","()",""],["jsonify","Jekyll::Filters","Jekyll/Filters.html#method-i-jsonify","(input)","<p>Convert the input into json string\n<p>input - The Array or Hash to be converted\n<p>Returns the converted json …\n"],["key?","Jekyll::Cache","Jekyll/Cache.html#method-i-key-3F","(key)","<p>Check if `key` already exists in this cache\n<p>Returns true if key exists in the cache, false otherwise\n"],["key?","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-key-3F","(key)","<p>Check if key exists in Drop\n<p>key - the string key whose value to fetch\n<p>Returns true if the given key is …\n"],["key?","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-key-3F","(key)",""],["keys","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-keys","()","<p>Generates a list of keys with user content as their values. This gathers up the Drop methods and keys …\n"],["layout","Jekyll::Drops::ExcerptDrop","Jekyll/Drops/ExcerptDrop.html#method-i-layout","()",""],["layout_directory","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory","()",""],["layouts","Jekyll::Renderer","Jekyll/Renderer.html#method-i-layouts","()","<p>The list of layouts registered for this Renderer. It can be written with #layouts=(new_layouts) Falls …\n"],["layouts_path","Jekyll::Theme","Jekyll/Theme.html#method-i-layouts_path","()",""],["linux?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-linux-3F","()",""],["livereload_args","Jekyll::Commands::Serve::BodyProcessor","Jekyll/Commands/Serve/BodyProcessor.html#method-i-livereload_args","()",""],["load_cached_partial","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-load_cached_partial","(path, context)",""],["locate_include_file","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-locate_include_file","(context, file, safe)",""],["log_level=","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-log_level-3D","(level)","<p>Public: Set the log level on the writer\n<p>level - (symbol) the log level\n<p>Returns nothing\n"],["logger","Jekyll","Jekyll.html#method-c-logger","()","<p>Public: Fetch the logger instance for this Jekyll process.\n<p>Returns the LogAdapter instance.\n"],["logger=","Jekyll","Jekyll.html#method-c-logger-3D","(writer)","<p>Public: Set the log writer.\n\n<pre>New log writer must respond to the same methods\nas Ruby&#39;s internal Logger.</pre>\n"],["long_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-long_day","()","<p>ddd: Monday..Sunday\n"],["long_month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-long_month","()","<p>MMMM: January..December\n"],["lookup_variable","Jekyll::LiquidExtensions","Jekyll/LiquidExtensions.html#method-i-lookup_variable","(context, variable)","<p>Lookup a Liquid variable in the given context.\n<p>context  - the Liquid context in question. variable - the …\n"],["lsi_related_posts","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-lsi_related_posts","()",""],["markdownify","Jekyll::Filters","Jekyll/Filters.html#method-i-markdownify","(input)","<p>Convert a Markdown string into HTML output.\n<p>input - The Markdown String to convert.\n<p>Returns the HTML formatted …\n"],["matches","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-matches","(_ext)","<p>Public: Does the given extension match this converter&#39;s list of acceptable extensions? Takes one …\n"],["matches","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-matches","(ext)","<p>Does the given extension match this converter&#39;s list of acceptable extensions? Takes one argument: …\n"],["matches","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-i-matches","(_ext)","<p>Does the given extension match this converter&#39;s list of acceptable extensions? Takes one argument: …\n"],["measure_time","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-measure_time","()",""],["mergable?","Jekyll::Utils","Jekyll/Utils.html#method-i-mergable-3F","(value)",""],["merge","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-merge","(other, &block)",""],["merge!","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-merge-21","(other)",""],["merge_data!","Jekyll::Document","Jekyll/Document.html#method-i-merge_data-21","(other, source: \"YAML front matter\")","<p>Merge some data in with this document&#39;s data.\n<p>Returns the merged data.\n"],["merged_file_read_opts","Jekyll::Utils","Jekyll/Utils.html#method-i-merged_file_read_opts","(site, opts)","<p>Returns merged option hash for File.read of self.site (if exists) and a given param\n"],["message","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-message","(topic, message = nil)","<p>Internal: Build a topic method\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["metadata_file","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-metadata_file","()","<p>Produce the absolute path of the metadata file\n<p>Returns the String path of the file.\n"],["method_missing","Jekyll::Collection","Jekyll/Collection.html#method-i-method_missing","(method, *args, &blck)","<p>Override of method_missing to check in @data for the key.\n"],["method_missing","Jekyll::Document","Jekyll/Document.html#method-i-method_missing","(method, *args, &blck)","<p>Override of method_missing to check in @data for the key.\n"],["minute","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-minute","()","<p>mm: 00..59\n"],["modified?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-modified-3F","(path)","<p>Checks if a path&#39;s (or one of its dependencies) mtime has changed\n<p>Returns a boolean.\n"],["modified?","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-modified-3F","()","<p>Is source path modified?\n<p>Returns true if modified since last write.\n"],["modified_time","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-modified_time","()",""],["month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-month","()","<p>MM: 01..12\n"],["most_recent_posts","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-most_recent_posts","()",""],["mri?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-mri-3F","()",""],["mtime","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-mtime","()","<p>Returns last modification time for this file.\n"],["mtimes","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-mtimes","()","<p>The cache of last modification times [path] -&gt; mtime.\n"],["mutable","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-mutable","(is_mutable = nil)","<p>Get or set whether the drop class is mutable. Mutability determines whether or not pre-defined fields …\n"],["mutable?","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-mutable-3F","()",""],["name","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-name","()",""],["new","Jekyll::Cache","Jekyll/Cache.html#method-c-new","(name)","<p>Get an existing named cache, or create a new one if none exists\n<p>name - name of the cache\n<p>Returns nothing. …\n"],["new","Jekyll::Cleaner","Jekyll/Cleaner.html#method-c-new","(site)",""],["new","Jekyll::Collection","Jekyll/Collection.html#method-c-new","(site, label)","<p>Create a new Collection.\n<p>site - the site to which this collection belongs. label - the name of the collection …\n"],["new","Jekyll::CollectionReader","Jekyll/CollectionReader.html#method-c-new","(site)",""],["new","Jekyll::Commands::Serve::BodyProcessor","Jekyll/Commands/Serve/BodyProcessor.html#method-c-new","(body, options)",""],["new","Jekyll::Commands::Serve::HttpAwareConnection","Jekyll/Commands/Serve/HttpAwareConnection.html#method-c-new","(_opts)",""],["new","Jekyll::Commands::Serve::LiveReloadReactor","Jekyll/Commands/Serve/LiveReloadReactor.html#method-c-new","()",""],["new","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-c-new","(server, root, callbacks)",""],["new","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-c-new","(request, response, options)",""],["new","Jekyll::Converter","Jekyll/Converter.html#method-c-new","(config = {})","<p>Initialize the converter.\n<p>Returns an initialized Converter.\n"],["new","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-c-new","(config)",""],["new","Jekyll::DataReader","Jekyll/DataReader.html#method-c-new","(site)",""],["new","Jekyll::Document","Jekyll/Document.html#method-c-new","(path, relations = {})","<p>Create a new Document.\n<p>path - the path to the file relations - a hash with keys :site and :collection, …\n"],["new","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-new","(obj)","<p>Create a new Drop\n<p>obj - the Jekyll Site, Collection, or Document required by the drop.\n<p>Returns nothing …\n"],["new","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-c-new","(site, base_directory = nil)",""],["new","Jekyll::Excerpt","Jekyll/Excerpt.html#method-c-new","(doc)","<p>Initialize this Excerpt instance.\n<p>doc - The Document.\n<p>Returns the new Excerpt.\n"],["new","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-c-new","(site)","<p>Initializes a new instance.\n"],["new","Jekyll::Inclusion","Jekyll/Inclusion.html#method-c-new","(site, base, name)",""],["new","Jekyll::Layout","Jekyll/Layout.html#method-c-new","(site, base, name)","<p>Initialize a new Layout.\n<p>site - The Site. base - The String path to the source. name - The String filename …\n"],["new","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-c-new","(site)",""],["new","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-c-new","(site)",""],["new","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-c-new","(renderer, filename)",""],["new","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-c-new","(stats)",""],["new","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-c-new","(writer, level = :info)","<p>Public: Create a new instance of a log writer\n<p>writer - Logger compatible instance log_level - (optional, …\n"],["new","Jekyll::Page","Jekyll/Page.html#method-c-new","(site, base, dir, name)","<p>Initialize a new Page.\n<p>site - The Site object. base - The String path to the source. dir  - The String …\n"],["new","Jekyll::PageReader","Jekyll/PageReader.html#method-c-new","(site, dir)",""],["new","Jekyll::Plugin","Jekyll/Plugin.html#method-c-new","(config = {})","<p>Initialize a new plugin. This should be overridden by the subclass.\n<p>config - The Hash of configuration …\n"],["new","Jekyll::PluginManager","Jekyll/PluginManager.html#method-c-new","(site)","<p>Create an instance of this class.\n<p>site - the instance of Jekyll::Site we&#39;re concerned with\n<p>Returns …\n"],["new","Jekyll::PostReader","Jekyll/PostReader.html#method-c-new","(site)",""],["new","Jekyll::Profiler","Jekyll/Profiler.html#method-c-new","(site)",""],["new","Jekyll::Publisher","Jekyll/Publisher.html#method-c-new","(site)",""],["new","Jekyll::Reader","Jekyll/Reader.html#method-c-new","(site)",""],["new","Jekyll::Regenerator","Jekyll/Regenerator.html#method-c-new","(site)",""],["new","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-c-new","(post)",""],["new","Jekyll::Renderer","Jekyll/Renderer.html#method-c-new","(site, document, site_payload = nil)",""],["new","Jekyll::Site","Jekyll/Site.html#method-c-new","(config)","<p>Public: Initialize a new Site.\n<p>config - A Hash containing site configuration details.\n"],["new","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-new","(site, base, dir, name, collection = nil)","<p>Initialize a new StaticFile.\n<p>site - The Site. base - The String path to the &lt;source&gt;. dir  - The …\n"],["new","Jekyll::StaticFileReader","Jekyll/StaticFileReader.html#method-c-new","(site, dir)",""],["new","Jekyll::Stevenson","Jekyll/Stevenson.html#method-c-new","()",""],["new","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Tags::Link","Jekyll/Tags/Link.html#method-c-new","(tag_name, relative_path, tokens)",""],["new","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-c-new","(name)",""],["new","Jekyll::Tags::PostUrl","Jekyll/Tags/PostUrl.html#method-c-new","(tag_name, post, tokens)",""],["new","Jekyll::Theme","Jekyll/Theme.html#method-c-new","(name)",""],["new","Jekyll::ThemeAssetsReader","Jekyll/ThemeAssetsReader.html#method-c-new","(site)",""],["new","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-c-new","(theme_name, opts)",""],["new","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-c-new","(theme_builder)",""],["new","Jekyll::URL","Jekyll/URL.html#method-c-new","(options)","<p>options - One of :permalink or :template must be supplied.\n\n<pre>:template     - The String used as template ...</pre>\n"],["new","Jekyll::Utils::ThreadEvent","Jekyll/Utils/ThreadEvent.html#method-c-new","()",""],["new","Kramdown::JekyllDocument","Kramdown/JekyllDocument.html#method-c-new","(source, options = {})",""],["new","Kramdown::Parser::SmartyPants","Kramdown/Parser/SmartyPants.html#method-c-new","(source, options)",""],["next","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-next","()",""],["next_doc","Jekyll::Document","Jekyll/Document.html#method-i-next_doc","()",""],["no_layout?","Jekyll::Document","Jekyll/Document.html#method-i-no_layout-3F","()","<p>Determine whether the file should be rendered with a layout.\n<p>Returns true if the Front Matter specifies …\n"],["no_subcommand","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-no_subcommand","(args)",""],["normalize_whitespace","Jekyll::Filters","Jekyll/Filters.html#method-i-normalize_whitespace","(input)","<p>Replace any whitespace in the input string with a single space\n<p>input - The String on which to operate. …\n"],["number_of_words","Jekyll::Filters","Jekyll/Filters.html#method-i-number_of_words","(input, mode = nil)","<p>Count the number of words in the input string.\n<p>input - The String on which to operate.\n<p>Returns the Integer …\n"],["osx?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-osx-3F","()",""],["output","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-output","()",""],["output_ext","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-output_ext","(ext)","<p>Public: The extension to be given to the output file (including the dot).\n<p>ext - The String extension or …\n"],["output_ext","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-output_ext","(_ext)","<p>Public: The extension to be given to the output file (including the dot).\n<p>ext - The String extension or …\n"],["output_ext","Jekyll::Converters::SmartyPants","Jekyll/Converters/SmartyPants.html#method-i-output_ext","(_ext)","<p>Public: The extension to be given to the output file (including the dot).\n<p>ext - The String extension or …\n"],["output_ext","Jekyll::Convertible","Jekyll/Convertible.html#method-i-output_ext","()","<p>Determine the extension depending on content_type.\n<p>Returns the String extension for the output file.\n\n<pre>e.g. ...</pre>\n"],["output_ext","Jekyll::Document","Jekyll/Document.html#method-i-output_ext","()","<p>The output extension of the document.\n<p>Returns the output extension\n"],["output_ext","Jekyll::Renderer","Jekyll/Renderer.html#method-i-output_ext","()","<p>Determine the extname the outputted file should have\n<p>Returns String the output extname including the leading …\n"],["outside_site_source?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-outside_site_source-3F","(path, dir, safe)",""],["page_path","Jekyll::Tags::IncludeRelativeTag","Jekyll/Tags/IncludeRelativeTag.html#method-i-page_path","(context)",""],["parse","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-parse","(content)",""],["parse_content","Kramdown::Parser::SmartyPants","Kramdown/Parser/SmartyPants.html#method-i-parse_content","()",""],["parse_date","Jekyll::Utils","Jekyll/Utils.html#method-i-parse_date","(input, msg = \"Input could not be parsed.\")","<p>Parse a date/time and throw an error if invalid\n<p>input - the date/time to parse msg - (optional) the error …\n"],["parse_params","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-parse_params","(context)",""],["path","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-path","()","<p>&#39;Path&#39; of the excerpt.\n<p>Returns the path for the doc this excerpt belongs to with #excerpt appended …\n"],["path","Jekyll::Page","Jekyll/Page.html#method-i-path","()","<p>The path to the source file\n<p>Returns the path to the source file\n"],["path","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-path","()","<p>Returns source file path.\n"],["payload","Jekyll::Renderer","Jekyll/Renderer.html#method-i-payload","()","<p>Fetches the payload used in Liquid rendering. It can be written with #payload=(new_payload) Falls back …\n"],["permalink","Jekyll::Document","Jekyll/Document.html#method-i-permalink","()","<p>The permalink for this Document. Permalink is set via the data Hash.\n<p>Returns the permalink or nil if no …\n"],["permalink","Jekyll::Page","Jekyll/Page.html#method-i-permalink","()","<p>The full path and filename of the post. Defined in the YAML of the post body.\n<p>Returns the String permalink …\n"],["place_in_layout?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-place_in_layout-3F","()","<p>Determine whether the file should be placed into layouts.\n<p>Returns false if the document is an asset file …\n"],["place_in_layout?","Jekyll::Document","Jekyll/Document.html#method-i-place_in_layout-3F","()","<p>Determine whether the file should be placed into layouts.\n<p>Returns false if the document is set to `layouts: …\n"],["place_in_layout?","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-place_in_layout-3F","()",""],["place_in_layouts","Jekyll::Renderer","Jekyll/Renderer.html#method-i-place_in_layouts","(content, payload, info)","<p>Render layouts and place document content inside.\n<p>Returns String rendered content\n"],["placeholders","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-placeholders","()",""],["plugin_allowed?","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-plugin_allowed-3F","(plugin_name)","<p>Check whether a gem plugin is allowed to be used during this build.\n<p>plugin_name - the name of the plugin …\n"],["plugins_path","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-plugins_path","()","<p>Public: Setup the plugin search path\n<p>Returns an Array of plugin search paths\n"],["pluralized_array_from_hash","Jekyll::Utils","Jekyll/Utils.html#method-i-pluralized_array_from_hash","(hash, singular_key, plural_key)","<p>Read array from the supplied hash favouring the singular key and then the plural key, and handling any …\n"],["pop","Jekyll::Filters","Jekyll/Filters.html#method-i-pop","(array, num = 1)",""],["populate_categories","Jekyll::Document","Jekyll/Document.html#method-i-populate_categories","()",""],["populate_tags","Jekyll::Document","Jekyll/Document.html#method-i-populate_tags","()",""],["possible_keys","Jekyll::URL","Jekyll/URL.html#method-i-possible_keys","(key)","<p>We include underscores in keys to allow for &#39;i_month&#39; and so forth. This poses a problem for …\n"],["post_attr_hash","Jekyll::Site","Jekyll/Site.html#method-i-post_attr_hash","(post_attr)","<p>Construct a Hash of Posts indexed by the specified Post attribute.\n<p>post_attr - The String name of the …\n"],["post_date","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-post_date","()",""],["posts","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-posts","()",""],["posts","Jekyll::Site","Jekyll/Site.html#method-i-posts","()",""],["previous","Jekyll::Drops::DocumentDrop","Jekyll/Drops/DocumentDrop.html#method-i-previous","()",""],["previous_doc","Jekyll::Document","Jekyll/Document.html#method-i-previous_doc","()",""],["print_stats","Jekyll::Site","Jekyll/Site.html#method-i-print_stats","()",""],["priority","Jekyll::Plugin","Jekyll/Plugin.html#method-c-priority","(priority = nil)","<p>Get or set the priority of this plugin. When called without an argument it returns the priority. When …\n"],["priority_value","Jekyll::Hooks","Jekyll/Hooks.html#method-c-priority_value","(priority)","<p>Ensure the priority is a Fixnum\n"],["private_delegate_methods","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-c-private_delegate_methods","(*symbols)","<p>Generate private Drop instance_methods for each symbol in the given list.\n<p>Returns nothing.\n"],["process","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-process","(options)","<p>Build your jekyll site Continuously watch if `watch` is set to true in the config.\n"],["process","Jekyll::Commands::Clean","Jekyll/Commands/Clean.html#method-c-process","(options)",""],["process","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-process","(options)",""],["process","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-process","(args, options = {})",""],["process","Jekyll::Commands::NewTheme","Jekyll/Commands/NewTheme.html#method-c-process","(args, opts)",""],["process","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-process","(opts)",""],["process","Jekyll::Deprecator","Jekyll/Deprecator.html#method-i-process","(args)",""],["process","Jekyll::Layout","Jekyll/Layout.html#method-i-process","(name)","<p>Extract information from the layout filename.\n<p>name - The String filename of the layout file.\n<p>Returns nothing. …\n"],["process","Jekyll::Page","Jekyll/Page.html#method-i-process","(name)","<p>Extract information from the page filename.\n<p>name - The String filename of the page file.\n<p>NOTE: `String#gsub` …\n"],["process","Jekyll::Site","Jekyll/Site.html#method-i-process","()","<p>Public: Read, process, and write this Site to output.\n<p>Returns nothing.\n"],["process!","Jekyll::Commands::Serve::BodyProcessor","Jekyll/Commands/Serve/BodyProcessor.html#method-i-process-21","()","<p>rubocop:disable Metrics/MethodLength\n"],["process_site","Jekyll::Command","Jekyll/Command.html#method-c-process_site","(site)","<p>Run Site#process and catch errors\n<p>site - the Jekyll::Site object\n<p>Returns nothing\n"],["process_with_graceful_fail","Jekyll::Command","Jekyll/Command.html#method-c-process_with_graceful_fail","(cmd, options, *klass)","<p>Run ::process method in a given set of Jekyll::Command subclasses and suggest re-running the associated …\n"],["processed?","Jekyll::Commands::Serve::BodyProcessor","Jekyll/Commands/Serve/BodyProcessor.html#method-i-processed-3F","()",""],["profile_process","Jekyll::Profiler","Jekyll/Profiler.html#method-i-profile_process","()",""],["proper_site_url?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-proper_site_url-3F","(site)",""],["properly_gathered_posts?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-properly_gathered_posts-3F","(site)",""],["publish?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-publish-3F","(thing)",""],["published?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-published-3F","()","<p>Whether the file is published or not, as indicated in YAML front-matter\n"],["published?","Jekyll::Document","Jekyll/Document.html#method-i-published-3F","()","<p>Whether the file is published or not, as indicated in YAML front-matter\n<p>Returns &#39;false&#39; if the …\n"],["publisher","Jekyll::Site","Jekyll/Site.html#method-i-publisher","()","<p>Returns the publisher or creates a new publisher if it doesn&#39;t already exist.\n<p>Returns The Publisher …\n"],["push","Jekyll::Filters","Jekyll/Filters.html#method-i-push","(array, input)",""],["quiet","Jekyll::Configuration","Jekyll/Configuration.html#method-i-quiet","(override = {})",""],["quiet?","Jekyll::Configuration","Jekyll/Configuration.html#method-i-quiet-3F","(override = {})",""],["read","Jekyll::Collection","Jekyll/Collection.html#method-i-read","()","<p>Read the allowed documents into the collection&#39;s array of docs.\n<p>Returns the sorted array of docs. …\n"],["read","Jekyll::CollectionReader","Jekyll/CollectionReader.html#method-i-read","()","<p>Read in all collections specified in the configuration\n<p>Returns nothing.\n"],["read","Jekyll::DataReader","Jekyll/DataReader.html#method-i-read","(dir)","<p>Read all the files in &lt;dir&gt; and adds them to @content\n<p>dir - The String relative path of the directory …\n"],["read","Jekyll::Document","Jekyll/Document.html#method-i-read","(opts = {})","<p>Read in the file and assign the content and data based on the file contents. Merge the frontmatter of …\n"],["read","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-read","()",""],["read","Jekyll::PageReader","Jekyll/PageReader.html#method-i-read","(files)","<p>Create a new `Jekyll::Page` object for each entry in a given array.\n<p>files - An array of file names inside …\n"],["read","Jekyll::Reader","Jekyll/Reader.html#method-i-read","()","<p>Read Site data from disk and load it into internal data structures.\n<p>Returns nothing.\n"],["read","Jekyll::Site","Jekyll/Site.html#method-i-read","()","<p>Read Site data from disk and load it into internal data structures.\n<p>Returns nothing.\n"],["read","Jekyll::StaticFileReader","Jekyll/StaticFileReader.html#method-i-read","(files)","<p>Create a new StaticFile object for every entry in a given list of basenames.\n<p>files - an array of file …\n"],["read","Jekyll::ThemeAssetsReader","Jekyll/ThemeAssetsReader.html#method-i-read","()",""],["read_config_file","Jekyll::Configuration","Jekyll/Configuration.html#method-i-read_config_file","(file)","<p>Public: Read configuration and return merged Hash\n<p>file - the path to the YAML file to be read in\n<p>Returns …\n"],["read_config_files","Jekyll::Configuration","Jekyll/Configuration.html#method-i-read_config_files","(files)","<p>Public: Read in a list of configuration files and merge with this hash\n<p>files - the list of configuration …\n"],["read_content","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_content","(dir, magic_dir, matcher)","<p>Read all the content files from &lt;source&gt;/&lt;dir&gt;/magic_dir\n\n<pre>and return them with the type klass.</pre>\n"],["read_data_file","Jekyll::DataReader","Jekyll/DataReader.html#method-i-read_data_file","(path)","<p>Determines how to read a data file.\n<p>Returns the contents of the data file.\n"],["read_data_to","Jekyll::DataReader","Jekyll/DataReader.html#method-i-read_data_to","(dir, data)","<p>Read and parse all .yaml, .yml, .json, .csv and .tsv files under &lt;dir&gt; and add them to the &lt;data&gt; …\n"],["read_directories","Jekyll::Reader","Jekyll/Reader.html#method-i-read_directories","(dir = \"\")","<p>Recursively traverse directories to find pages and static files that will become part of the site according …\n"],["read_drafts","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_drafts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_drafts and create a new Document object with each one. …\n"],["read_file","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-read_file","(file, context)","<p>This method allows to modify the file content by inheriting from the class.\n"],["read_posts","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_posts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_posts and create a new Document object with each one. …\n"],["read_publishable","Jekyll::PostReader","Jekyll/PostReader.html#method-i-read_publishable","(dir, magic_dir, matcher)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/&lt;magic_dir&gt; and create a new Document object with …\n"],["read_yaml","Jekyll::Convertible","Jekyll/Convertible.html#method-i-read_yaml","(base, name, opts = {})","<p>Read the YAML frontmatter.\n<p>base - The String path to the dir containing the file. name - The String filename …\n"],["read_yaml","Jekyll::PageWithoutAFile","Jekyll/PageWithoutAFile.html#method-i-read_yaml","(*)",""],["really_windows?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-really_windows-3F","()",""],["realpath_prefixed_with?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-realpath_prefixed_with-3F","(path, dir)",""],["regenerate?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-regenerate-3F","(document)","<p>Checks if a renderable object needs to be regenerated\n<p>Returns a boolean.\n"],["register","Jekyll::Hooks","Jekyll/Hooks.html#method-c-register","(owners, event, priority: DEFAULT_PRIORITY, &block)","<p>register hook(s) to be called later, public API\n"],["register_one","Jekyll::Hooks","Jekyll/Hooks.html#method-c-register_one","(owner, event, priority, &block)","<p>register a single hook to be called later, internal API\n"],["related_posts","Jekyll::Document","Jekyll/Document.html#method-i-related_posts","()","<p>Calculate related posts.\n<p>Returns an Array of related Posts.\n"],["related_posts","Jekyll::Drops::SiteDrop","Jekyll/Drops/SiteDrop.html#method-i-related_posts","()","<p>`{{ site.related_posts }}` is how posts can get posts related to them, either through LSI if it&#39;s …\n"],["relative_directory","Jekyll::Collection","Jekyll/Collection.html#method-i-relative_directory","()","<p>The directory for this Collection, relative to the site source or the directory containing the collection. …\n"],["relative_path","Jekyll::Document","Jekyll/Document.html#method-i-relative_path","()","<p>The path to the document, relative to the collections_dir.\n<p>Returns a String path which represents the …\n"],["relative_path","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-relative_path","()","<p>&#39;Relative Path&#39; of the excerpt.\n<p>Returns the relative_path for the doc this excerpt belongs to …\n"],["relative_path","Jekyll::Page","Jekyll/Page.html#method-i-relative_path","()","<p>The path to the page source file, relative to the site source\n"],["relative_permalinks_are_deprecated","Jekyll::Site","Jekyll/Site.html#method-i-relative_permalinks_are_deprecated","()","<p>Warns the user if permanent links are relative to the parent directory. As this is a deprecated function …\n"],["relative_to_source","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-relative_to_source","(entry)",""],["relative_url","Jekyll::Filters::URLFilters","Jekyll/Filters/URLFilters.html#method-i-relative_url","(input)","<p>Produces a URL relative to the domain root based on site.baseurl unless it is already an absolute url …\n"],["reload","Jekyll::Commands::Serve::LiveReloadReactor","Jekyll/Commands/Serve/LiveReloadReactor.html#method-i-reload","(pages)","<p>For a description of the protocol see feedback.livereload.com/knowledgebase/articles/86174-livereload-protocol …\n"],["remove","Jekyll::Commands::Clean","Jekyll/Commands/Clean.html#method-c-remove","(filename, checker_func: :file?)",""],["render","Jekyll::Inclusion","Jekyll/Inclusion.html#method-i-render","(context)",""],["render","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-render","(*args)",""],["render","Jekyll::Page","Jekyll/Page.html#method-i-render","(layouts, site_payload)","<p>Add any necessary layouts to this post\n<p>layouts      - The Hash of {“name” =&gt; “layout”}. …\n"],["render","Jekyll::Site","Jekyll/Site.html#method-i-render","()","<p>Render the site to the destination.\n<p>Returns nothing.\n"],["render","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render","(context)",""],["render","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-render","(context)",""],["render","Jekyll::Tags::Link","Jekyll/Tags/Link.html#method-i-render","(context)",""],["render","Jekyll::Tags::OptimizedIncludeTag","Jekyll/Tags/OptimizedIncludeTag.html#method-i-render","(context)",""],["render","Jekyll::Tags::PostUrl","Jekyll/Tags/PostUrl.html#method-i-render","(context)",""],["render","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-i-render","(contents)",""],["render!","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-render-21","(*args)","<p>This method simply &#39;rethrows any error&#39; before attempting to render the template.\n"],["render_all_layouts","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_all_layouts","(layouts, payload, info)","<p>Recursively render layouts\n<p>layouts - a list of the layouts payload - the payload for Liquid info    - …\n"],["render_document","Jekyll::Renderer","Jekyll/Renderer.html#method-i-render_document","()","<p>Render the document.\n<p>Returns String rendered document output rubocop: disable Metrics/AbcSize, Metrics/MethodLength …\n"],["render_liquid","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_liquid","(content, payload, info, path)","<p>Render Liquid in the content\n<p>content - the raw Liquid content to render payload - the payload for Liquid …\n"],["render_liquid","Jekyll::Renderer","Jekyll/Renderer.html#method-i-render_liquid","(content, payload, info, path = nil)","<p>Render the given content with the payload and info\n<p>content - payload - info    - path    - (optional) …\n"],["render_variable","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-render_variable","(context)","<p>Render the variable if required\n"],["render_with_liquid?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_with_liquid-3F","()","<p>Determine whether the file should be rendered with Liquid.\n<p>Returns true if the file has Liquid Tags or …\n"],["render_with_liquid?","Jekyll::Document","Jekyll/Document.html#method-i-render_with_liquid-3F","()","<p>Determine whether the file should be rendered with Liquid.\n<p>Returns false if the document is either an …\n"],["render_with_liquid?","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-render_with_liquid-3F","()",""],["render_with_liquid?","Jekyll::PageExcerpt","Jekyll/PageExcerpt.html#method-i-render_with_liquid-3F","()",""],["renderer","Jekyll::Convertible","Jekyll/Convertible.html#method-i-renderer","()",""],["renderer","Jekyll::Document","Jekyll/Document.html#method-i-renderer","()",""],["require_all","Object","Object.html#method-i-require_all","(path)","<p>Require all of the Ruby files in the given directory.\n<p>path - The String relative path from here to the …\n"],["require_from_bundler","Jekyll::PluginManager","Jekyll/PluginManager.html#method-c-require_from_bundler","()",""],["require_gems","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_gems","()","<p>Require each of the gem plugins specified.\n<p>Returns nothing.\n"],["require_if_present","Jekyll::External","Jekyll/External.html#method-c-require_if_present","(names)","<p>Require a gem or file if it&#39;s present, otherwise silently fail.\n<p>names - a string gem name or array …\n"],["require_plugin_files","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_plugin_files","()","<p>Require all .rb files if safe mode is off\n<p>Returns nothing.\n"],["require_theme_deps","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_theme_deps","()","<p>Require each of the runtime_dependencies specified by the theme&#39;s gemspec.\n<p>Returns false only if no …\n"],["require_with_graceful_fail","Jekyll::External","Jekyll/External.html#method-c-require_with_graceful_fail","(names)","<p>Require a gem or gems. If it&#39;s not present, show a very nice error message that explains everything …\n"],["reset","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-reset","()",""],["reset","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-reset","()",""],["reset","Jekyll::Site","Jekyll/Site.html#method-i-reset","()","<p>rubocop:disable Metrics/AbcSize rubocop:disable Metrics/MethodLength\n<p>Reset Site details.\n<p>Returns nothing …\n"],["reset","Jekyll::Utils::Ansi","Jekyll/Utils/Ansi.html#method-i-reset","(str = \"\")","<p>Reset the color back to the default color so that you do not leak any colors when you move onto the next …\n"],["reset_cache","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-reset_cache","()",""],["respond_to_missing?","Jekyll::Collection","Jekyll/Collection.html#method-i-respond_to_missing-3F","(method, include_private = false)","<p>Override of normal respond_to? to match method_missing&#39;s logic for looking in @data.\n"],["respond_to_missing?","Jekyll::Document","Jekyll/Document.html#method-i-respond_to_missing-3F","(method, *)",""],["retrieve_dirs","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_dirs","(_base, dir, dot_dirs)","<p>Recursively traverse directories with the read_directories function.\n<p>base - The String representing the …\n"],["retrieve_pages","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_pages","(dir, dot_pages)","<p>Retrieve all the pages from the current directory, add them to the site and sort them.\n<p>dir - The String …\n"],["retrieve_posts","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_posts","(dir)","<p>Retrieves all the posts(posts/drafts) from the given directory and add them to the site and sort them. …\n"],["retrieve_static_files","Jekyll::Reader","Jekyll/Reader.html#method-i-retrieve_static_files","(dir, dot_static_files)","<p>Retrieve all the static files from the current directory, add them to the site and sort them.\n<p>dir - The …\n"],["root","Jekyll::Theme","Jekyll/Theme.html#method-i-root","()",""],["run","Jekyll::Renderer","Jekyll/Renderer.html#method-i-run","()","<p>Prepare payload and render the document\n<p>Returns String rendered document output\n"],["run","Jekyll::Utils::Exec","Jekyll/Utils/Exec.html#method-i-run","(*args)","<p>Runs a program in a sub-shell.\n<p>*args - a list of strings containing the program name and arguments\n<p>Returns …\n"],["running?","Jekyll::Commands::Serve::LiveReloadReactor","Jekyll/Commands/Serve/LiveReloadReactor.html#method-i-running-3F","()",""],["runtime_dependencies","Jekyll::Theme","Jekyll/Theme.html#method-i-runtime_dependencies","()",""],["safe","Jekyll::Plugin","Jekyll/Plugin.html#method-c-safe","(safe = nil)","<p>Get or set the safety of this plugin. When called without an argument it returns the safety. When an …\n"],["safe_glob","Jekyll::Utils","Jekyll/Utils.html#method-i-safe_glob","(dir, patterns, flags = 0)","<p>Work the same way as Dir.glob but separating the input into two parts (&#39;dir&#39; + &#39;/&#39; + …\n"],["safe_load_file","Jekyll::Configuration","Jekyll/Configuration.html#method-i-safe_load_file","(filename)",""],["sample","Jekyll::Filters","Jekyll/Filters.html#method-i-sample","(input, num = 1)",""],["sanitize_filename","Jekyll::DataReader","Jekyll/DataReader.html#method-i-sanitize_filename","(name)",""],["sanitize_label","Jekyll::Collection","Jekyll/Collection.html#method-i-sanitize_label","(label)","<p>Produce a sanitized label name Label names may not contain anything but alphanumeric characters,\n\n<pre>underscores, ...</pre>\n"],["sanitize_url","Jekyll::URL","Jekyll/URL.html#method-i-sanitize_url","(str)","<p>Returns a sanitized String URL, stripping “../../” and multiples of “/”, as well …\n"],["sanitized_path","Jekyll","Jekyll.html#method-c-sanitized_path","(base_directory, questionable_path)","<p>Public: Ensures the questionable path is prefixed with the base directory\n\n<pre>and prepends the questionable ...</pre>\n"],["sanitized_path","Jekyll::PathManager","Jekyll/PathManager.html#method-c-sanitized_path","(base_directory, questionable_path)","<p>Ensures the questionable path is prefixed with the base directory and prepends the questionable path …\n"],["sass_file?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-sass_file-3F","()","<p>Determine whether the document is a Sass file.\n<p>Returns true if extname == .sass or .scss, false otherwise. …\n"],["sass_file?","Jekyll::Document","Jekyll/Document.html#method-i-sass_file-3F","()","<p>Determine whether the document is a Sass file.\n<p>Returns true if extname == .sass or .scss, false otherwise. …\n"],["sass_path","Jekyll::Theme","Jekyll/Theme.html#method-i-sass_path","()",""],["sassify","Jekyll::Filters","Jekyll/Filters.html#method-i-sassify","(input)","<p>Convert a Sass string into CSS output.\n<p>input - The Sass String to convert.\n<p>Returns the CSS formatted String …\n"],["scaffold_post_content","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-scaffold_post_content","()",""],["scssify","Jekyll::Filters","Jekyll/Filters.html#method-i-scssify","(input)","<p>Convert a Scss string into CSS output.\n<p>input - The Scss String to convert.\n<p>Returns the CSS formatted String …\n"],["search_file","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-search_file","(req, res, basename)","<p>Add the ability to tap file.html the same way that Nginx does on our Docker images (or on GitHub Pages …\n"],["search_index_file","Jekyll::Commands::Serve::Servlet","Jekyll/Commands/Serve/Servlet.html#method-i-search_index_file","(req, res)",""],["second","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-second","()","<p>ss: 00..59\n"],["set","Jekyll::Utils::ThreadEvent","Jekyll/Utils/ThreadEvent.html#method-i-set","()",""],["set_timezone","Jekyll","Jekyll.html#method-c-set_timezone","(timezone)","<p>Public: Set the TZ environment variable to use the timezone specified\n<p>timezone - the IANA Time Zone\n<p>Returns …\n"],["setup","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-setup","()",""],["setup","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-setup","()","<p>Setup and normalize the configuration:\n\n<pre>* Create Kramdown if it doesn&#39;t exist.\n* Set syntax_highlighter, ...</pre>\n"],["setup","Jekyll::Site","Jekyll/Site.html#method-i-setup","()","<p>Load necessary libraries, plugins, converters, and generators.\n<p>Returns nothing.\n"],["setup","Kramdown::JekyllDocument","Kramdown/JekyllDocument.html#method-c-setup","(options)","<p>The implementation is basically the core logic in +Kramdown::Document#initialize+\n<p>rubocop:disable Naming/MemoizedInstanceVariableName …\n"],["shift","Jekyll::Filters","Jekyll/Filters.html#method-i-shift","(array, num = 1)",""],["short_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-short_day","()","<p>dd: Mon..Sun\n"],["short_month","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-short_month","()","<p>MMM: Jan..Dec\n"],["short_year","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-short_year","()","<p>YY: 00..99\n"],["shutdown","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-shutdown","()",""],["site","Jekyll::Drops::UnifiedPayloadDrop","Jekyll/Drops/UnifiedPayloadDrop.html#method-i-site","()",""],["site_data","Jekyll::Site","Jekyll/Site.html#method-i-site_data","()","<p>Prepare site data for site payload. The method maintains backward compatibility if the key &#39;data&#39; …\n"],["site_payload","Jekyll::Site","Jekyll/Site.html#method-i-site_payload","()","<p>The Hash payload containing site-wide data.\n<p>Returns the Hash: { “site” =&gt; data } where data …\n"],["sites","Jekyll","Jekyll.html#method-c-sites","()","<p>Public: An array of sites\n<p>Returns the Jekyll sites created.\n"],["skip_processing?","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-c-skip_processing-3F","(request, response, options)",""],["skip_processing?","Jekyll::Commands::Serve::SkipAnalyzer","Jekyll/Commands/Serve/SkipAnalyzer.html#method-i-skip_processing-3F","()",""],["slug","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-slug","()",""],["slugified_categories","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-slugified_categories","()","<p>Similar to output from #categories, but each category will be downcased and all non-alphanumeric characters …\n"],["slugify","Jekyll::Filters","Jekyll/Filters.html#method-i-slugify","(input, mode = nil)","<p>Slugify a filename or title.\n<p>input - The filename or title to slugify. mode - how string is slugified …\n"],["slugify","Jekyll::Utils","Jekyll/Utils.html#method-i-slugify","(string, mode: nil, cased: false)","<p>Slugify a filename or title.\n<p>string - the filename or title to slugify mode - how string is slugified …\n"],["smartify","Jekyll::Filters","Jekyll/Filters.html#method-i-smartify","(input)","<p>Convert quotes into smart quotes.\n<p>input - The String to convert.\n<p>Returns the smart-quotified String.\n"],["sort","Jekyll::Filters","Jekyll/Filters.html#method-i-sort","(input, property = nil, nils = \"first\")","<p>Sort an array of objects\n<p>input - the object array property - property within each object to filter by …\n"],["sort_files!","Jekyll::Reader","Jekyll/Reader.html#method-i-sort_files-21","()","<p>Sorts posts, pages, and static files.\n"],["source","Jekyll::Configuration","Jekyll/Configuration.html#method-i-source","(override)","<p>Public: Directory of the Jekyll source folder\n<p>override - the command-line options hash\n<p>Returns the path …\n"],["source_file_mtime","Jekyll::Document","Jekyll/Document.html#method-i-source_file_mtime","()","<p>Return document file modification time in the form of a Time object.\n<p>Return document file modification …\n"],["source_modified_or_dest_missing?","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-source_modified_or_dest_missing-3F","(source_path, dest_path)","<p>Checks if the source has been modified or the destination is missing\n<p>returns a boolean\n"],["special?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-special-3F","(entry)",""],["start","Jekyll::Commands::Serve::LiveReloadReactor","Jekyll/Commands/Serve/LiveReloadReactor.html#method-i-start","(opts)",""],["stats_table","Jekyll::LiquidRenderer","Jekyll/LiquidRenderer.html#method-i-stats_table","(num_of_rows = 50)",""],["stop","Jekyll::Commands::Serve::LiveReloadReactor","Jekyll/Commands/Serve/LiveReloadReactor.html#method-i-stop","()",""],["stringify_hash_keys","Jekyll::Utils","Jekyll/Utils.html#method-i-stringify_hash_keys","(hash)","<p>Apply #to_s to all keys in the Hash\n<p>hash - the hash to which to apply this transformation\n<p>Returns a new …\n"],["stringify_keys","Jekyll::Configuration","Jekyll/Configuration.html#method-i-stringify_keys","()","<p>Public: Turn all keys into string\n<p>Return a copy of the hash where all its keys are strings\n"],["strip","Jekyll::Utils::Ansi","Jekyll/Utils/Ansi.html#method-i-strip","(str)","<p>Strip ANSI from the current string.  It also strips cursor stuff, well some of it, and it also strips …\n"],["strip_index","Jekyll::Filters::URLFilters","Jekyll/Filters/URLFilters.html#method-i-strip_index","(input)","<p>Strips trailing `/index.html` from URLs to create pretty permalinks\n<p>input - the URL with a possible `/index.html` …\n"],["subclasses","Jekyll::Command","Jekyll/Command.html#method-c-subclasses","()","<p>A list of subclasses of Jekyll::Command\n"],["superdirs_regex","Jekyll::Document","Jekyll/Document.html#method-c-superdirs_regex","(dirname)","<p>Class-wide cache to stash and retrieve regexp to detect “super-directories” of a particular …\n"],["symbolize_hash_keys","Jekyll::Utils","Jekyll/Utils.html#method-i-symbolize_hash_keys","(hash)","<p>Apply #to_sym to all keys in the hash\n<p>hash - the hash to which to apply this transformation\n<p>Returns a new …\n"],["symlink?","Jekyll","Jekyll.html#method-i-symlink-3F","(entry)","<p>– Check if a file is a symlink. NOTE: This can be converted to allowing even in safe,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">since</span> <span class=\"ruby-identifier\">we</span> <span class=\"ruby-identifier\">use</span> <span class=\"ruby-constant\">Pathutil</span><span class=\"ruby-comment\">#in_path? ...</span>\n</pre>\n"],["symlink_outside_site_source?","Jekyll","Jekyll.html#method-i-symlink_outside_site_source-3F","(entry)","<p>– NOTE: Pathutil#in_path? gets the realpath. @param [&lt;Anything&gt;] entry the entry you want to validate. …\n"],["syntax_example","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-syntax_example","()",""],["tabulate","Jekyll::Profiler","Jekyll/Profiler.html#method-c-tabulate","(table_rows)",""],["tag_includes_dirs","Jekyll::Tags::IncludeRelativeTag","Jekyll/Tags/IncludeRelativeTag.html#method-i-tag_includes_dirs","(context)",""],["tag_includes_dirs","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-tag_includes_dirs","(context)",""],["tag_name","Jekyll::Tags::Link","Jekyll/Tags/Link.html#method-c-tag_name","()",""],["tags","Jekyll::Site","Jekyll/Site.html#method-i-tags","()",""],["template","Jekyll::Commands::Serve::BodyProcessor","Jekyll/Commands/Serve/BodyProcessor.html#method-i-template","()","<p>rubocop:enable Metrics/MethodLength\n"],["template","Jekyll::Page","Jekyll/Page.html#method-i-template","()","<p>The template of the permalink.\n<p>Returns the template String.\n"],["theme_directories","Jekyll::ThemeBuilder::ERBRenderer","Jekyll/ThemeBuilder/ERBRenderer.html#method-i-theme_directories","()",""],["theme_layout_directory","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-theme_layout_directory","()",""],["third_party_processors","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-third_party_processors","()","<p>Public: A list of processors that you provide via plugins.\n<p>Returns an array of symbols\n"],["title","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-title","()",""],["titleize_slug","Jekyll::Utils","Jekyll/Utils.html#method-i-titleize_slug","(slug)","<p>Takes a slug and turns it into a simple title.\n"],["to_h","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-to_h","()","<p>Generate a Hash representation of the Drop by resolving each key&#39;s value. It includes Drop methods, …\n"],["to_h","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-to_h","()",""],["to_hash","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-to_hash","()",""],["to_html","Kramdown::JekyllDocument","Kramdown/JekyllDocument.html#method-i-to_html","()","<p>Use Kramdown::Converter::Html class to convert this document into HTML.\n<p>The implementation is basically …\n"],["to_integer","Jekyll::Filters","Jekyll/Filters.html#method-i-to_integer","(input)","<p>Convert the input into integer\n<p>input - the object string\n<p>Returns the integer value\n"],["to_json","Jekyll::Drops::Drop","Jekyll/Drops/Drop.html#method-i-to_json","(state = nil)","<p>Generate a JSON representation of the Drop.\n<p>state - the JSON::State object which determines the state …\n"],["to_json","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-to_json","(state = nil)",""],["to_liquid","Jekyll::Collection","Jekyll/Collection.html#method-i-to_liquid","()","<p>Produce a representation of this Collection for use in Liquid. Exposes two attributes:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span> <span class=\"ruby-identifier\">label</span>\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-identifier\">docs</span>\n</pre>\n"],["to_liquid","Jekyll::Convertible","Jekyll/Convertible.html#method-i-to_liquid","(attrs = nil)","<p>Convert this Convertible&#39;s data to a Hash suitable for use by Liquid.\n<p>Returns the Hash representation …\n"],["to_liquid","Jekyll::Document","Jekyll/Document.html#method-i-to_liquid","()","<p>Create a Liquid-understandable version of this Document.\n<p>Returns a Hash representing this Document&#39;s …\n"],["to_liquid","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-to_liquid","()",""],["to_liquid","Jekyll::PageExcerpt","Jekyll/PageExcerpt.html#method-i-to_liquid","()",""],["to_liquid","Jekyll::Site","Jekyll/Site.html#method-i-to_liquid","()",""],["to_liquid","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-to_liquid","()",""],["to_s","Jekyll::Convertible","Jekyll/Convertible.html#method-i-to_s","()","<p>Returns the contents as a String.\n"],["to_s","Jekyll::Document","Jekyll/Document.html#method-i-to_s","()","<p>The string representation for this document.\n<p>Returns the content of the document\n"],["to_s","Jekyll::Drops::CollectionDrop","Jekyll/Drops/CollectionDrop.html#method-i-to_s","()",""],["to_s","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-to_s","()",""],["to_s","Jekyll::Inclusion","Jekyll/Inclusion.html#method-i-to_s","()",""],["to_s","Jekyll::LiquidRenderer::Table","Jekyll/LiquidRenderer/Table.html#method-i-to_s","(num_of_rows = 50)",""],["to_s","Jekyll::URL","Jekyll/URL.html#method-i-to_s","()","<p>The generated relative URL of the resource\n<p>Returns the String URL\n"],["transform","Jekyll::Convertible","Jekyll/Convertible.html#method-i-transform","()","<p>Transform the contents based on the content type.\n<p>Returns the transformed contents.\n"],["transform_keys","Jekyll::Utils","Jekyll/Utils.html#method-i-transform_keys","(hash)",""],["trigger","Jekyll::Hooks","Jekyll/Hooks.html#method-c-trigger","(owner, event, *args)","<p>interface for Jekyll core components to trigger hooks\n"],["trigger_hooks","Jekyll::Document","Jekyll/Document.html#method-i-trigger_hooks","(hook_name, *args)",""],["trigger_hooks","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-trigger_hooks","(*)",""],["trigger_hooks","Jekyll::Page","Jekyll/Page.html#method-i-trigger_hooks","(hook_name, *args)",""],["type","Jekyll::Convertible","Jekyll/Convertible.html#method-i-type","()","<p>The type of a document,\n\n<pre>i.e., its classname downcase&#39;d and to_sym&#39;d.</pre>\n<p>Returns the type of self.\n"],["type","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-type","()","<p>Returns the type of the collection if present, nil otherwise.\n"],["unescape_path","Jekyll::URL","Jekyll/URL.html#method-c-unescape_path","(path)","<p>Unescapes a URL path segment\n<p>path - The path to be unescaped.\n<p>Examples:\n"],["unix?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-unix-3F","()",""],["unshift","Jekyll::Filters","Jekyll/Filters.html#method-i-unshift","(array, input)",""],["update_deprecated_types","Jekyll::FrontmatterDefaults","Jekyll/FrontmatterDefaults.html#method-i-update_deprecated_types","(set)",""],["uri_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-uri_escape","(input)","<p>URI escape a string.\n<p>input - The String to escape.\n<p>Examples\n"],["url","Jekyll::Document","Jekyll/Document.html#method-i-url","()","<p>The computed URL for the document. See `Jekyll::URL#to_s` for more details.\n<p>Returns the computed URL for …\n"],["url","Jekyll::Page","Jekyll/Page.html#method-i-url","()","<p>The generated relative url of this page. e.g. /about.html.\n<p>Returns the String url.\n"],["url","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-url","()","<p>Applies a similar URL-building technique as Jekyll::Document that takes the collection&#39;s URL template …\n"],["url_placeholders","Jekyll::Document","Jekyll/Document.html#method-i-url_placeholders","()","<p>Construct a Hash of key-value pairs which contain a mapping between\n\n<pre>a key in the URL template and the ...</pre>\n"],["url_placeholders","Jekyll::Page","Jekyll/Page.html#method-i-url_placeholders","()","<p>Returns a hash of URL placeholder names (as symbols) mapping to the desired placeholder replacements. …\n"],["url_template","Jekyll::Collection","Jekyll/Collection.html#method-i-url_template","()","<p>The URL template to render collection&#39;s documents at.\n<p>Returns the URL template to render collection&#39;s …\n"],["url_template","Jekyll::Document","Jekyll/Document.html#method-i-url_template","()","<p>The URL template where the document would be accessible.\n<p>Returns the URL template for the document.\n"],["urls_only_differ_by_case","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-urls_only_differ_by_case","(site)",""],["user_email","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-user_email","()",""],["user_name","Jekyll::ThemeBuilder","Jekyll/ThemeBuilder.html#method-i-user_name","()",""],["valid_include_file?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-valid_include_file-3F","(path, dir, safe)",""],["valid_processors","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-valid_processors","()","<p>Public: Provides you with a list of processors comprised of the ones we support internally and the ones …\n"],["validate","Jekyll::Configuration","Jekyll/Configuration.html#method-i-validate","()","<p>Public: Ensure the proper options are set in the configuration\n<p>Returns the configuration Hash\n"],["validate_data!","Jekyll::Convertible","Jekyll/Convertible.html#method-i-validate_data-21","(filename)","<p>rubocop:enable Metrics/AbcSize\n"],["validate_file_name","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_file_name","(file)",""],["validate_params","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_params","()",""],["validate_permalink!","Jekyll::Convertible","Jekyll/Convertible.html#method-i-validate_permalink-21","(filename)",""],["value_from_plural_key","Jekyll::Utils","Jekyll/Utils.html#method-i-value_from_plural_key","(hash, key)",""],["value_from_singular_key","Jekyll::Utils","Jekyll/Utils.html#method-i-value_from_singular_key","(hash, key)",""],["vanilla_windows?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-vanilla_windows-3F","()","<p>Not a Windows Subsystem for Linux (WSL)\n"],["verbose","Jekyll::Configuration","Jekyll/Configuration.html#method-i-verbose","(override = {})",""],["verbose?","Jekyll::Configuration","Jekyll/Configuration.html#method-i-verbose-3F","(override = {})",""],["version","Jekyll::Drops::JekyllDrop","Jekyll/Drops/JekyllDrop.html#method-i-version","()",""],["version_constraint","Jekyll::External","Jekyll/External.html#method-c-version_constraint","(gem_name)","<p>The version constraint required to activate a given gem. Usually the gem version requirement is “&gt; …\n"],["w_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-w_day","()","<p>d: 1..7 (Monday..Sunday)\n"],["w_year","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-w_year","()","<p>CCYYw, ISO week year may differ from CCYY for the first days of January and last days of December\n"],["wait","Jekyll::Utils::ThreadEvent","Jekyll/Utils/ThreadEvent.html#method-i-wait","()",""],["warn","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-warn","(topic, message = nil, &block)","<p>Public: Print a message\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”, …\n"],["warn","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message\n"],["warnings","Jekyll::LiquidRenderer::File","Jekyll/LiquidRenderer/File.html#method-i-warnings","()",""],["watch","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-watch","(site, options)","<p>Private: Watch for file changes and rebuild the site.\n<p>site - A Jekyll::Site instance options - A Hash …\n"],["week","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-week","()","<p>WW: 01..53 %W and %U do not comply with ISO 8601-1\n"],["where","Jekyll::Filters","Jekyll/Filters.html#method-i-where","(input, property, value)","<p>Filter an array of objects\n<p>input    - the object array. property - the property within each object to …\n"],["where_exp","Jekyll::Filters","Jekyll/Filters.html#method-i-where_exp","(input, variable, expression)","<p>Filters an array of objects against an expression\n<p>input - the object array variable - the variable to …\n"],["whitelist","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-whitelist","()","<p>Build an array of allowed plugin gem names.\n<p>Returns an array of strings, each string being the name of …\n"],["windows?","Jekyll::Utils::Platforms","Jekyll/Utils/Platforms.html#method-i-windows-3F","()",""],["write","Jekyll::Convertible","Jekyll/Convertible.html#method-i-write","(dest)","<p>Write the generated page file to the destination directory.\n<p>dest - The String path to the destination …\n"],["write","Jekyll::Document","Jekyll/Document.html#method-i-write","(dest)","<p>Write the generated Document file to the destination directory.\n<p>dest - The String path to the destination …\n"],["write","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-write","(level_of_message, topic, message = nil, &block)","<p>Internal: Log a message.\n<p>level_of_message - the Symbol level of message, one of :debug, :info, :warn, …\n"],["write","Jekyll::Site","Jekyll/Site.html#method-i-write","()","<p>Write static files, pages, and posts.\n<p>Returns nothing.\n"],["write","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-write","(dest)","<p>Write the static file to the destination directory (if modified).\n<p>dest - The String path to the destination …\n"],["write?","Jekyll::Collection","Jekyll/Collection.html#method-i-write-3F","()","<p>Whether the collection&#39;s documents ought to be written as individual\n\n<pre>files in the output.</pre>\n<p>Returns true …\n"],["write?","Jekyll::Document","Jekyll/Document.html#method-i-write-3F","()","<p>Determine whether this document should be written. Based on the Collection to which it belongs.\n<p>True if …\n"],["write?","Jekyll::Page","Jekyll/Page.html#method-i-write-3F","()",""],["write?","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-write-3F","()","<p>Whether to write the file to the filesystem\n<p>Returns true unless the defaults for the destination path …\n"],["write_message?","Jekyll::LogAdapter","Jekyll/LogAdapter.html#method-i-write_message-3F","(level_of_message)","<p>Internal: Check if the message should be written given the log level.\n<p>level_of_message - the Symbol level …\n"],["write_metadata","Jekyll::Regenerator","Jekyll/Regenerator.html#method-i-write_metadata","()","<p>Write the metadata to disk\n<p>Returns nothing.\n"],["xml_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-xml_escape","(input)","<p>XML escape a string for use. Replaces any special characters with appropriate HTML entity replacements. …\n"],["y_day","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-y_day","()","<p>DDD: 001..366\n"],["yaml_file?","Jekyll::Document","Jekyll/Document.html#method-i-yaml_file-3F","()","<p>Determine whether the document is a YAML file.\n<p>Returns true if the extname is either .yml or .yaml, false …\n"],["year","Jekyll::Drops::UrlDrop","Jekyll/Drops/UrlDrop.html#method-i-year","()","<p>CCYY\n"],["default.html","","blank_template/_layouts/default_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“{{ site.lang | default: ”en-US“ }}”&gt;\n\n<pre>&lt;head&gt; ...</pre>\n"],["main.scss","","blank_template/_sass/main_scss.html","","<p>$backgroundColor: #ffffff; $bodyColor: #000000; $bodyFont: -apple-system,BlinkMacSystemFont,“Segoe …\n"],["main.scss","","blank_template/assets/css/main_scss.html","","<p>@import “main”;\n"],["index","","blank_template/index_md.html","","<p>—\nlayout: default\n<p>title: “Happy Jekylling!”\n<p>You&#39;re ready to go!\n"],["livereload.js","","jekyll/commands/serve/livereload_assets/livereload_js.html","","<p>(function e(t,n,r){function s(o,u){if(!n){if(!t){var a=typeof require==“function”&amp;&amp;require;if(!u&amp;&amp;a)return …\n"],["mime.types","","jekyll/mime_types.html","","<p># Woah there. Do not edit this file directly. # This file is generated automatically by script/vendor-mimes. …\n"],["404.html","","site_template/404_html.html","","<p>permalink: /404.html layout: default\n<p>&lt;style type=“text/css” media=“screen”&gt; …\n"],["about.markdown","","site_template/about_markdown.html","","<p>—\nlayout: page\ntitle: About\n<p>permalink: /about/\n<p>This is the base Jekyll theme. You can find out more info …\n"],["index.markdown","","site_template/index_markdown.html","","<p>—\n<p>Feel free to add content and custom Front Matter to this file.\n<p>To modify the layout, see jekyllrb.com/docs/themes/#overriding-theme-defaults …\n"],["Gemfile","","theme_template/Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org” gemspec\n"],["default.html","","theme_template/_layouts/default_html.html","","<p>{{ content }}\n"],["page.html","","theme_template/_layouts/page_html.html","","<p>layout: default\n<p>{{ content }}\n"],["post.html","","theme_template/_layouts/post_html.html","","<p>layout: default\n<p>{{ content }}\n"],["_post","","theme_template/example/_post_md.html","","<p>—\n<p>layout: post\n<p>Eos eu docendi tractatos sapientem, brute option menandri in vix, quando vivendo accommodare …\n"],["index.html","","theme_template/example/index_html.html","","<p>layout: page\n<p>Lorem ipsum dolor sit amet, quo id prima corrumpit pertinacia, id ius dolor dolores, an veri …\n"],["style.scss","","theme_template/example/style_scss.html","","<p>// Here, you can test out the Sass/SCSS that you include in your theme. // Simply `@import` the necessary …\n"]]}}